{"version":3,"sources":["helper/Constant.js","api/Api.js","MockClientPaginationTable.js","ui/ExpandCollapse.js","ui/MockModalManager.js","helper/Helper.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/SingleContentList.js","en.js","it.js","App.js","custom-element/et-single-app.js"],"names":["PERPAGEOPTIONS","SELECT_COLLECTION_TYPE","id","SELECT","NAME","CREATEDBY","lastEdited","CREATEDDATE","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","NO_DATA_AVAILABLE_MSG","domain","process","templateBaseUrl","rootAdminEndPoint","localeUrl","sortByCreateDateByDescOrder","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","data","getContents","collectionType","page","pageSize","url","getLocales","fetchContents","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","console","log","headers","config","defaultOptions","mockRows","MockClientPaginationTable","props","totalPages","perPage","state","pagination","Math","ceil","length","onPageInput","e","setState","pageChangeValue","target","value","onSubmit","setPage","Number","isNaN","newPaginationState","Object","assign","onPerPageSelect","eventKey","onFirstPage","onPreviousPage","onNextPage","onLastPage","onSelectRow","event","row","updatedSelectedRows","updatedRow","onRowsLogger","rows","selectedRows","selectedRowIndex","findIndex","r","selected","filter","deselectRow","push","selectRow","onSelectAllRows","checked","currentRows","updatedSelections","Set","map","updatedRows","indexOf","ids","onRow","rowIndex","setSelectedContent","selectedCollectionType","className","classNames","role","getSortingColumns","sortingColumns","sortableTransform","sort","onSort","selectedColumn","sortingOrder","defaultSortingOrder","strategy","byProperty","sortingFormatter","customHeaderFormatters","customHeaderFormattersDefinition","selectedContent","name","direction","TABLE_SORT_DIRECTION","ASC","position","columns","property","displayName","header","label","index","rowSpan","colSpan","transforms","formatters","customFormatters","sortableHeaderCellFormatter","cell","rowData","selectionCellFormatter","tableCellFormatter","perPageOptions","this","prevProps","prevState","compose","paginate","orderBy","sortedPaginatedRows","fluid","PfProvider","striped","bordered","hover","dataTable","components","cellProps","Header","headerRows","resolve","Body","rowKey","viewType","PAGINATION_VIEW","TABLE","pageInputValue","amountOfPages","itemCount","itemsStart","itemsEnd","React","Component","ExpandCollapse","handleSubmit","preventDefault","runOnFilterData","values","handleInputChange","onClick","open","tabIndex","style","margin","display","type","onChange","placeholder","getKey","content","keys","item","toLowerCase","allowedKeys","includes","SimpleTable","renderToggleButton","isMenuShown","height","top","right","border","onChangeTemplateId","setTemplateId","templateType","selectedTemplateType","contentAttribute","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","defaultValue","message","disabled","hidden","templateList","el","templateName","Title","createdAt","createDate","selectDefaultTemplate","strapiDomain","Config","selectedTemplateId","selectedContentArr","selectedContenttype","nameTwo","encodeURIComponent","JSON","stringify","selectedContentId","handleTypeaheadChangeContentType","selectedContentType","option","componentDidMount","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","forEach","element","info","pluralName","selectedContentName","templatesList","collectionTypes","handleAddNewContent","strapiContentManagerUrl","newWindow","window","focus","bind","xs","title","to","bsStyle","marginTop","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","checkIfComponent","toString","dataObj","arr","split","replace","Array","isArray","theKey","theIndex","Panel","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","width","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","renderAccordionData","toggle","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","setActiveTabKey","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","componentDidUpdate","show","collectionAttributes","dummyData","dialogClassName","onHide","fetchTitleOrName","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","SingleContentList","initSingleContentListPage","componentWillUnmount","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","doContentSearch","btnVisibility","document","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","searchByKey","contents","collType","getContentsByCollectionType","setSelectedContentName","contentData","results","lastPage","pageCount","totalItems","total","onContentSearch","searchQuery","searchResult","handleStateOnTermSearch","handleQueryChange","radioButton","defaultChecked","onPageNavigation","changePageValue","changePage","saveHandler","setContent","setCollectionType","setSearchBy","setCollectionTypeState","selectedCont","collectionTypeApiData","singularName","min","saveConfig","lg","intl","formatMessage","emptyLabel","options","toggleMenu","align","onPageSet","messages","sm","injectIntl","App","setLocale","contentName","tempId","currLocale","en","it","path","exact","SingleWidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","ReactDOM","render","ref","current","createElement","appendChild","HTMLElement","parse","customElements","define"],"mappings":"mWAKaA,EAAiB,CAAC,EAAG,GAAI,GAAI,GAAI,IAYjCC,EAAyB,cAAC,IAAD,CAAkBC,GAAG,yBAK7CC,EAAS,cAAC,IAAD,CAAkBD,GAAG,eAC9BE,EAAO,cAAC,IAAD,CAAkBF,GAAG,aAC5BG,EAAY,cAAC,IAAD,CAAkBH,GAAG,gBACjCI,EAAa,cAAC,IAAD,CAAkBJ,GAAG,mBAClCK,EAAc,cAAC,IAAD,CAAkBL,GAAG,oBAEpCM,EAAY,CACrBL,OAAQA,EACRC,KAAMA,EACNC,UAAWA,EACXC,WAAYA,EACZC,YAAaA,GAIJE,EAAsB,cAAC,IAAD,CAAkBP,GAAG,sBAK3CQ,EAAkB,aAKlBC,EAAwB,sBAmIxBC,EAA0B,CAAC,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QACrFC,EAAuB,MAGvBC,EAAsB,CAAC,YAAa,YAAa,cAAe,YAAa,YAAa,KAAM,gBAAiB,UACjHC,EAAsB,OACtBC,EAAwB,cAAC,IAAD,CAAkBd,GAAG,wBCtLpDe,EAAM,UAAMC,4BACZC,EAAe,UAAMD,+BAAN,cACfE,EAAiB,UAAMH,EAAN,2CACjBI,EAAS,UAAMJ,EAAN,iBACTK,EAA2B,uBAC3BC,EAAe,CACjB,cAAgB,UAAhB,OAA2BL,8IAQlBM,EAAkB,uCAAG,8BAAAC,EAAA,sEACPC,IAAMC,IAAN,UAAaV,EAAb,kCAAqDW,GAA8B,GAAIlB,IADhF,uBACtBmB,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAKlBC,EAAW,uCAAG,WAAOC,GAAP,mCAAAN,EAAA,6DAAuBO,EAAvB,+BDfP,ECe2CC,EAApC,+BDdH,ECehBC,EADmB,UACVd,GADU,OACUW,EADV,YAC4BA,EAD5B,iBACmDC,EADnD,qBACoEC,GADpE,OAC+EX,GAD/E,SAEAI,IAAMC,IAAIO,EAAKN,GAA8B,GAAIlB,IAFjD,uBAEfmB,EAFe,EAEfA,KAFe,kBAGhBA,GAHgB,2CAAH,sDAaXM,EAAU,uCAAG,gCAAAV,EAAA,6DAClBS,EADkB,UACTb,GADS,SAECK,IAAMC,IAAIO,EAAKN,GAA8B,GAAIlB,IAFlD,uBAEdmB,EAFc,EAEdA,KAFc,kBAGfA,GAHe,2CAAH,qDAMVO,EAAa,uCAAG,WAAOL,GAAP,SAAAN,EAAA,sEAEZK,EAAYC,GAFA,mFAAH,sDAKbM,EAAsC,uCAAG,WAAON,EAAgBO,GAAvB,mBAAAb,EAAA,6DAC9CS,EAD8C,UACrCd,GADqC,OACjBW,EADiB,YACCA,EADD,YACmBO,GADnB,SAE3BZ,IAAMC,IAAIO,EAAKN,GAA8B,GAAIlB,IAFtB,uBAE1CmB,EAF0C,EAE1CA,KAF0C,kBAG3CA,GAH2C,2CAAH,wDAMtCU,EAAoB,uCAAG,WAAOR,EAAgBS,EAAOC,GAA9B,mCAAAhB,EAAA,yDAAwCO,EAAxC,+BD7ChB,EC6CqEC,EAArD,+BD5CZ,EC6CfF,EAD2B,sBAEtB,IAAIW,MAAM,6BAFY,cAI1BR,EAJ0B,UAIjBd,GAJiB,OAIGW,EAJH,YAIqBA,EAJrB,oBAI+CU,EAJ/C,yBAIwED,EAJxE,iBAIsFR,EAJtF,qBAIuGC,GAJvG,SAKTP,IAAMC,IAAIO,EAAKN,GAA8B,GAAIlB,IALxC,uBAKxBmB,EALwB,EAKxBA,KALwB,kBAMzBA,GANyB,4CAAH,0DAWpBc,GAAW,uCAAG,WAAOZ,GAAP,iBAAAN,EAAA,6DACjBmB,EAAoBb,EAAc,0BAAsBA,GAAmB,GAD1D,SAEJL,IAAMC,IAAN,UAAaR,EAAgByB,GAAoBhB,GAA8B,KAF3E,cAEjBC,EAFiB,yBAGhBA,GAHgB,2CAAH,sDAgBlBgB,GAAoB,SAACC,GAKnB,OAHJC,QAAQC,IAAI,mBAVL,IAaCF,IAAkBpC,EACX,CACHuC,QAAS1B,GAGN,IAYNK,GAAgC,WAA4C,IAA3CsB,EAA0C,uDAAjC,GAAIJ,EAA6B,uDAAb,SACnEK,EAAiBN,GAAkBC,GACvC,OAAO,2BACAI,GACAC,I,oEC3FLC,GAAW,GAEJC,GAAb,kDAQI,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IA0QVC,WAAa,WACT,IAAQC,EAAY,EAAKC,MAAMC,WAAvBF,QACR,OAAOG,KAAKC,KAAKR,GAASS,OAASL,IA7QpB,EA+QnBM,YAAc,SAAAC,GACV,EAAKC,SAAS,CAAEC,gBAAiBF,EAAEG,OAAOC,SAhR3B,EAkRnBC,SAAW,WACP,EAAKC,QAAQ,EAAKZ,MAAMQ,kBAnRT,EAqRnBI,QAAU,SAAAF,GACN,IAAMnC,EAAOsC,OAAOH,GACpB,IACKG,OAAOC,MAAMJ,IACJ,KAAVA,GACAnC,EAAO,GACPA,GAAQ,EAAKuB,aACf,CACE,IAAIiB,EAAqBC,OAAOC,OAAO,GAAI,EAAKjB,MAAMC,YACtDc,EAAmBxC,KAAOA,EAC1B,EAAKgC,SAAS,CAAEN,WAAYc,EAAoBP,gBAAiBjC,MA/RtD,EAkSnB2C,gBAAkB,SAACC,EAAUb,GACzB,IAAIS,EAAqBC,OAAOC,OAAO,GAAI,EAAKjB,MAAMC,YACtDc,EAAmBhB,QAAUoB,EAC7BJ,EAAmBxC,KAAO,EAC1B,EAAKgC,SAAS,CAAEN,WAAYc,KAtSb,EAwSnBK,YAAc,WACV,EAAKR,QAAQ,IAzSE,EA2SnBS,eAAiB,WACT,EAAKrB,MAAMC,WAAW1B,KAAO,GAC7B,EAAKqC,QAAQ,EAAKZ,MAAMC,WAAW1B,KAAO,IA7S/B,EAgTnB+C,WAAa,WACQ,EAAKtB,MAAMC,WAApB1B,KACG,EAAKuB,cACZ,EAAKc,QAAQ,EAAKZ,MAAMC,WAAW1B,KAAO,IAnT/B,EAsTnBgD,WAAa,WACT,IAAQhD,EAAS,EAAKyB,MAAMC,WAApB1B,KACFuB,EAAa,EAAKA,aACpBvB,EAAOuB,GACP,EAAKc,QAAQd,IA1TF,EA6TnB0B,YAAc,SAACC,EAAOC,GAClB,IAIQC,EAAqBC,EAJrBC,EAAiB,EAAKhC,MAAtBgC,aACR,EAA+B,EAAK7B,MAA5B8B,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aACRC,EAAmBF,EAAKG,WAAU,SAAAC,GAAC,OAAIA,EAAEzF,KAAOiF,EAAIjF,MACtDuF,GAAoB,IAEhBN,EAAIS,UACJR,EAAsBI,EAAaK,QAAO,SAAAF,GAAC,QAAMA,IAAMR,EAAIjF,OAC3DmF,EAAahC,EAA0ByC,YAAYX,KAEnDK,EAAaO,KAAKZ,EAAIjF,IACtBkF,EAAsBI,EACtBH,EAAahC,EAA0B2C,UAAUb,IAErDI,EAAKE,GAAoBJ,EACzB,EAAKrB,SAAS,CACVuB,KAAMA,EACNC,aAAcJ,IAElBE,EAAaC,EAAKM,QAAO,SAAAF,GAAC,OAAIA,EAAEC,eAhVrB,EAmVnBK,gBAAkB,SAAAf,GACd,IAAQI,EAAiB,EAAKhC,MAAtBgC,aACR,EAA+B,EAAK7B,MAA5B8B,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aACRU,EAAUhB,EAAMhB,OAAOgC,QACvBC,EAAc,EAAKA,cAAcZ,KAEvC,GAAIW,EAAS,CACT,IAAME,EAAiB,aAChB,IAAIC,IAAJ,uBAAYF,EAAYG,KAAI,SAAAX,GAAC,OAAIA,EAAEzF,OAAnC,aAA2CsF,MAE5Ce,EAAchB,EAAKe,KAAI,SAAAX,GACzB,OAAOS,EAAkBI,QAAQb,EAAEzF,KAAO,EAAImD,EAA0B2C,UAAUL,GAAKA,KAE3F,EAAK3B,SAAS,CAEVuB,KAAMgB,EACNf,aAAcY,IAElBd,EAAaiB,EAAYV,QAAO,SAAAF,GAAC,OAAIA,EAAEC,iBACpC,CACH,IAAMa,EAAMN,EAAYG,KAAI,SAAAX,GAAC,OAAIA,EAAEzF,MAC7BkG,EAAoBZ,EAAaK,QAAO,SAAAF,GAC1C,QAASc,EAAID,QAAQb,IAAM,MAEzBY,EAAchB,EAAKe,KAAI,SAAAX,GACzB,OAAOS,EAAkBI,QAAQb,EAAEzF,KAAO,EAAIyF,EAAItC,EAA0ByC,YAAYH,MAE5F,EAAK3B,SAAS,CACVuB,KAAMgB,EACNf,aAAcY,IAElBd,EAAaiB,EAAYV,QAAO,SAAAF,GAAC,OAAIA,EAAEC,eAlX5B,EAkYnBc,MAAQ,SAACvB,EAAD,GAAuB,EAAfwB,SAIZ,EAAKrD,MAAMsD,mBAAmB,CAACzB,GAAM,EAAK7B,MAAMuD,wBAEhD,IAEMjB,EAFexC,GAESoD,QAAQrB,EAAIjF,KAAO,EACjD,MAAO,CACH4G,UAAWC,KAAW,CAAEnB,SAAUA,IAClCoB,KAAM,QA1YV,IAAMC,EAAoB,kBAAM,EAAKxD,MAAMyD,gBAAkB,IAEvDC,EAAoBC,QAAU,CAChCH,oBACAI,OAAQ,SAAAC,GACJ,EAAKtD,SAAS,CACVkD,eAAgBE,YAAc,CAC1BF,eAAgB,EAAKzD,MAAMyD,eAC3BK,aAAcC,sBACdF,sBAKZG,SAAUL,cAAgBM,aAGxBC,EAAmBP,UAAY,CACjCD,oBACAF,oBACAQ,SAAUL,cAAgBM,aAvBf,OA2Bf,EAAKE,uBAAyBC,mCAE9B,EAAKpE,MAAQ,CAETqE,gBAAiB,GAGjBZ,eAAgB,CACZa,KAAM,CACFC,UAAWC,uBAAqBC,IAChCC,SAAU,IAKlBC,QAAS,CACL,CACIC,SAAU,SACVC,YAAa,SACbC,OAAQ,CACJC,MAAO,SACPlF,MAAO,CACHmF,MAAO,EACPC,QAAS,EACTC,QAAS,EACTzI,GAAI,UAER0I,WAAY,CAACzB,GACb0B,WAAY,CAAClB,GACbmB,iBAAkB,CAACC,gCAGvBC,KAAM,CACF1F,MAAO,CACHmF,MAAO,GAEXI,WAAY,CACR,SAAC1E,EAAD,GAAmC,IAAzB8E,EAAwB,EAAxBA,QAAStC,EAAe,EAAfA,SACf,OAAOuC,iCACH,CAAED,UAAStC,YACX,EAAK1B,YAFoB,iBAGf0B,GAHe,gCAGcA,QAM3D,CACI0B,SAAU,QACVC,YAAa,QACbC,OAAQ,CACJC,MAAO,OACPlF,MAAO,CACHmF,MAAO,EACPC,QAAS,EACTC,QAAS,GAEbC,WAAY,CAACzB,GACb0B,WAAY,CAAClB,GACbmB,iBAAkB,CAACC,gCAEvBC,KAAM,CACF1F,MAAO,CACHmF,MAAO,GAEXI,WAAY,CAACM,wBAGrB,CACId,SAAU,YACVE,OAAQ,CACJC,MAAO,aACPlF,MAAO,CACHmF,MAAO,EACPC,QAAS,EACTC,QAAS,GAEbC,WAAY,CAACzB,GACb0B,WAAY,CAAClB,GACbmB,iBAAkB,CAACC,gCAEvBC,KAAM,CACF1F,MAAO,CACHmF,MAAO,GAEXI,WAAY,CAACM,wBAGrB,CACId,SAAU,YACVE,OAAQ,CACJC,MAAO,cACPlF,MAAO,CACHmF,MAAO,EACPC,QAAS,EACTC,QAAS,GAEbC,WAAY,CAACzB,GACb0B,WAAY,CAAClB,GACbmB,iBAAkB,CAACC,gCAEvBC,KAAM,CACF1F,MAAO,CACHmF,MAAO,GAEXI,WAAY,CAACM,wBAGrB,CACId,SAAU,OACVE,OAAQ,CACJC,MAAO,OACPlF,MAAO,CACHmF,MAAO,EACPC,QAAS,EACTC,QAAS,GAEbC,WAAY,CAACzB,GACb0B,WAAY,CAAClB,GACbmB,iBAAkB,CAACC,gCAEvBC,KAAM,CACF1F,MAAO,CACHmF,MAAO,GAEXI,WAAY,CAACM,wBAGrB,CACId,SAAU,YACVE,OAAQ,CACJC,MAAO,eACPlF,MAAO,CACHmF,MAAO,EACPC,QAAS,EACTC,QAAS,GAEbC,WAAY,CAACzB,GACb0B,WAAY,CAAClB,GACbmB,iBAAkB,CAACC,gCAEvBC,KAAM,CACF1F,MAAO,CACHmF,MAAO,GAEXI,WAAY,CAACM,wBAGrB,CACId,SAAU,SACVE,OAAQ,CACJC,MAAO,SACPlF,MAAO,CACHmF,MAAO,EACPC,QAAS,EACTC,QAAS,GAEbC,WAAY,CAACzB,GACb0B,WAAY,CAAClB,GACbmB,iBAAkB,CAACC,gCAEvBC,KAAM,CACF1F,MAAO,CACHmF,MAAO,GAEXI,WAAY,CAACM,yBA8CzB5D,KAAM,EAAKjC,MAAMF,SAIjBoC,aAAc,GAGd9B,WAAY,CACR1B,KAAM,EACNwB,QAAS,EACT4F,eAAgB,CAAC,EAAG,GAAI,KAI5BnF,gBAAiB,GA5PN,EARvB,qDAwQI,WACQoF,KAAK/F,MAAMF,UACXiG,KAAKrF,SAAS,CAAEuB,KAAM8D,KAAK/F,MAAMF,aA1Q7C,gCA8QI,SAAmBkG,EAAWC,GACtBF,KAAK/F,MAAMF,WAAakG,EAAUlG,UAClCiG,KAAKrF,SAAS,CAAEuB,KAAM8D,KAAK/F,MAAMF,aAhR7C,yBA6XI,WACI,MAAsDiG,KAAK5F,MAAnD8B,EAAR,EAAQA,KAAM2B,EAAd,EAAcA,eAAgBkB,EAA9B,EAA8BA,QAAS1E,EAAvC,EAAuCA,WACvC,OAAO8F,aACHC,mBAAS/F,GACT0D,UAAY,CACRgB,QAASA,EACTlB,iBACAE,KAAMsC,WACNjC,SAAUL,cAAgBM,aAN3B8B,CAQLjE,KAvYV,oBAwZI,WAAU,IAAD,OACL,EAAiE8D,KAAK5F,MAA9D2E,EAAR,EAAQA,QAAS1E,EAAjB,EAAiBA,WAAYwD,EAA7B,EAA6BA,eAAgBjD,EAA7C,EAA6CA,gBACvC0F,EAAsBN,KAAKlD,cAEjC,OACI,eAAC,OAAD,CAAMyD,OAAK,EAAX,UACI,eAAC,QAAMC,WAAP,CACIC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,WAAS,EACT7B,QAASA,EACT8B,WAAY,CACR3B,OAAQ,CACJS,KAAM,SAAAmB,GACF,OAAO,EAAKvC,uBAAuB,CAC/BuC,YACA/B,UACAlB,iBACA3B,KAAMoE,EAAoBpE,KAC1BU,gBAAiB,EAAKA,qBAd1C,UAoBI,cAAC,QAAMmE,OAAP,CAAcC,WAAYC,cAAmB,CAAElC,cAC/C,cAAC,QAAMmC,KAAP,CACIhF,KAAMoE,EAAoBpE,KAC1BiF,OAAO,KACP9D,MAAO2C,KAAK3C,WAGpB,cAAC,gBAAD,CACI+D,SAAUC,kBAAgBC,MAC1BjH,WAAYA,EACZkH,eAAgB3G,EAChB4G,cAAelB,EAAoBkB,cACnCC,UAAWnB,EAAoBmB,UAC/BC,WAAYpB,EAAoBoB,WAChCC,SAAUrB,EAAoBqB,SAC9BrG,gBAAiB0E,KAAK1E,gBACtBE,YAAawE,KAAKxE,YAClBC,eAAgBuE,KAAKvE,eACrBhB,YAAauF,KAAKvF,YAClBiB,WAAYsE,KAAKtE,WACjBC,WAAYqE,KAAKrE,WACjBZ,SAAUiF,KAAKjF,iBAvcnC,wBACI,SAAiBe,GACb,OAAOV,OAAOC,OAAO,GAAIS,EAAK,CAAES,UAAU,MAFlD,yBAII,SAAmBT,GACf,OAAOV,OAAOC,OAAO,GAAIS,EAAK,CAAES,UAAU,QALlD,GAA+CqF,IAAMC,W,UCgDtCC,G,kDA3DX,WAAY7H,GAAQ,IAAD,8BACf,cAAMA,IASV8H,aAAe,SAAClG,GACZA,EAAMmG,iBACN,EAAK/H,MAAMgI,gBAAgB,EAAK7H,MAAM8H,OAAOxD,OAZ9B,EAenByD,kBAAoB,SAACtG,GACjB,EAAKlB,SAAS,CACVuH,OAAO,gBAAIrG,EAAMhB,OAAO6D,KAAO7C,EAAMhB,OAAOC,UAjBjC,EAqBnBsH,QAAU,WACN,EAAKzH,SAAS,CAAE0H,MAAO,EAAKjI,MAAMiI,QApBlC,EAAKjI,MAAQ,CACTiI,MAAM,EACNH,OAAQ,CACJxD,KAAM,KALC,E,iDAyBnB,c,oBAIA,WACI,OACI,qBACIjB,UAAU,sBACVE,KAAK,SACL2E,SAAU,EACVC,MAAO,CAAEC,OAAQ,aAJrB,SAMI,uBAAMzH,SAAUiF,KAAK+B,aAArB,UACI,sBAAKQ,MAAO,CAAEE,QAAS,OAAQD,OAAQ,aAAvC,UACI,yBAAQ3L,GAAG,mBAAmB8G,KAAK,SAAS,gBAAc,OAAO,gBAAc,QAAQ+E,KAAK,SAASjF,UAAU,kCAA/G,kBAAsJ,sBAAMA,UAAU,aACtK,uBACIiF,KAAK,SACLhE,KAAK,OACL5D,MAAOkF,KAAK5F,MAAM8H,OAAOxD,KACzBiE,SAAU3C,KAAKmC,kBACfxE,KAAK,WACLF,UAAU,wCACVmF,YAAY,sBAGpB,qBAAKnF,UAAU,mBAAmB8E,MAAO,CAAEC,OAAQ,cAAnD,SACI,wBAAQ/E,UAAU,kBAAlB,+B,GArDKmE,IAAMC,W,WCKWA,Y,kBCKjCgB,GAAS,SAACC,GACnB,GAAIA,EAAS,CACT,IAAMC,EAAO3H,OAAO2H,KAAKD,GACrB1D,EAAQ2D,EAAK1G,WAAU,SAAA2G,GAAI,MAAI,UAAYA,EAAKC,iBACpD,GAAI7D,GAAS,EACT,OAAOhE,OAAO2H,KAAKD,GAAS1D,GAI5B,IADAA,EAAQ2D,EAAK1G,WAAU,SAAA2G,GAAI,MAAI,SAAWA,EAAKC,mBAClC,EACT,OAAO7H,OAAO2H,KAAKD,GAAS1D,GAG5B,IAAM8D,EAAcH,EAAKvG,QAAO,SAAAwG,GAAI,OAAKvL,EAAoB0L,SAASH,MACtE,GAAIE,GAAeA,EAAY1I,OAC3B,OAAO0I,EAAY,GAOnC,MAAO,KC5BEE,GAAb,kDAEI,WAAYnJ,GAAQ,IAAD,8BACf,cAAMA,IAYVoJ,mBAAqB,cAAGC,YAAH,IAAgBlB,EAAhB,EAAgBA,QAAhB,OACjB,wBACIM,KAAK,SACLH,MAAO,CAAEzD,SAAU,WAAYyE,OAAQ,OAAQC,IAAK,MAAOC,MAAO,MAAOC,OAAQ,uBACjFtB,QAAS,SAAC1H,GACNA,EAAEsH,iBACFI,EAAQ1H,IALhB,SAOC,sBAAM+C,UAAU,wBArBF,EAwBnBkG,mBAAqB,SAACjJ,GAClB,EAAKT,MAAM2J,cAAclJ,EAAEG,OAAOC,QAvBlC,EAAKV,MAAQ,CAETyJ,aAAc,CAAC,CAAC,MAAS,OACzBC,qBAAsB,IALX,EAFvB,0CA8BI,WAAU,IAAD,OACL,OACI,mCACI,wBAAOrG,UAAU,yFAAjB,UACI,gCACI,6BACKrC,OAAO2H,KAAKgB,IAAkB9G,KAAI,SAAC+F,EAAMgB,GAAP,OAAe,6BAAc,cAAC,IAAD,CAAkBnN,GAAIkN,GAAiBf,MAA5CgB,UAGnE,gCAEQhE,KAAK/F,MAAMwE,gBAAgBjE,OAAS,GAChCwF,KAAK/F,MAAMwE,gBAAgBxB,KAAI,SAAA+F,GAC3B,OACI,+BACI,6BAAKA,EAAKH,GAAOG,MACjB,uCAAQA,EAAKiB,UAAUC,UAAvB,YAAoClB,EAAKiB,UAAUE,YACnD,6BAAKC,KAAO,IAAIC,KAAKrB,EAAKsB,YAAYC,OAAOjN,KAC7C,6BAAK8M,KAAO,IAAIC,KAAKrB,EAAKwB,cAAcD,OAAOjN,KAC/C,6BACI,yBAAQoH,KAAK,UAAU+F,aAAc,OAAQhH,UAAU,eAAekF,SAAU,EAAKgB,mBAArF,UACC,cAAC,IAAD,CAAkB9M,GAAG,qBAArB,SACQ,SAAC6N,GAAD,OAAa,wBAAQ5J,MAAM,OAAO6J,UAAQ,EAACC,QAAM,EAApC,SAAsCF,OAF5D,uDAG6E,EAAKzK,MAAM4K,aAAa5H,KAAI,SAAC6H,GAClG,OAAO,wBAAoBhK,MAAOgK,EAAGjO,GAA9B,SAAmCiO,EAAGC,cAAzBD,EAAGjO,cAV9BmM,EAAKnM,kBA5CtD,GAAiC+K,IAAMC,WAwEjCkC,GAAmB,CACrBiB,MAAO,WACPC,UAAW,cACXX,UAAW,iBACXY,WAAY,kBACZC,sBAAuB,6BCrErBC,GAAY,UAAMvN,4BAEHwN,G,kDACjB,WAAYpL,GAAQ,IAAD,8BACf,cAAMA,IAaV0J,mBAAqB,SAAC9H,GAClB,EAAKlB,SAAS,CAAE2K,mBAAoBzJ,EAAMhB,OAAOC,SAflC,EAkBnByC,mBAAqB,SAACgI,EAAoBC,GACtC,EAAK7K,SAAS,CAAE8D,gBAAiB8G,IACjC,EAAK5K,SAAS,CAAE+D,KAAM6G,IACtB,EAAK5K,SAAS,CAAE8K,QAASC,mBAAmBC,KAAKC,UAAUL,MAC3D,EAAK5K,SAAS,CAAEkL,kBAAmBN,EAAmB,GAAG1O,MAtB1C,EAyBnBiP,iCAAmC,SAAAvJ,GAC/B,IAAIwJ,EAAsBxJ,EAASU,KAAI,SAAA+I,GAAM,OAAIA,EAAO7G,SACxD,EAAKxE,SAAS,CAAEkK,aAAckB,KA3Bf,EA8BnBE,kBA9BmB,sBA8BC,kCAAA7N,EAAA,sEACSD,IADT,cAEhB+N,GADIA,EADY,QAEY1N,KAAKgE,QAAO,SAAA2J,GACpC,OAAOA,GAAQA,EAAIC,KAAOD,EAAIC,IAAIC,WAAW,UAAaF,EAAIG,eAE5DC,EAAoB,GAC1BL,EAAa1L,QAAU0L,EAAaM,SAAQ,SAAAC,GACxCF,EAAkB7J,KAAK,CAAEyC,MAAOsH,EAAQC,KAAKC,gBAPjC,SASoBrN,GAAY,EAAKW,MAAM2M,oBAAsB,EAAK3M,MAAM2M,oBAAsB,IATlG,gBASJC,EATI,EASVrO,KACN,EAAKmC,SAAS,CAAEkK,aAAcgC,EAAeC,gBAAiBD,IAV9C,4CA9BD,EA8CjBE,oBAAsB,WACpB,IAAIC,EAAuB,UAAM5B,GAAN,0BACvB6B,EAAYC,OAAO7E,KAAK2E,EAAyB,UAClDC,GACCA,EAAUE,SAhDd,EAAK/M,MAAQ,CACTqE,gBAAiB,GACjBC,KAAM,KACN+G,QAAS,KACTqB,gBAAiB,GACjBjB,kBAAmB,EACnBP,mBAAoB,UACpBT,aAAc,IAElB,EAAKkC,oBAAsB,EAAKA,oBAAoBK,KAAzB,gBAXZ,E,0CAsDnB,WACI,OACI,sBAAM3J,UAAU,+CAAhB,SACI,cAAC,MAAD,UACI,cAAC,MAAD,CAAK4J,GAAI,GAAT,SACI,8BACI,gCACI,sBAAM5J,UAAU,0BAA0B6J,MAAM,WAChD,oBAAI7J,UAAU,2CAAd,SAAyD,cAAC,IAAD,CAAkB5G,GAAG,kBAC9E,qBAAK4G,UAAU,6CAA6CE,KAAK,SAAjE,SACA,qCAAO,cAAC,IAAD,CAAkB9G,GAAG,kBAE5B,sBAAK4G,UAAU,MAAf,UACI,cAAC,MAAD,CAAK4J,GAAI,EAAT,SACI,qBAAI5J,UAAU,4CAAd,UACA,cAAC,IAAD,CAAkB5G,GAAG,gBADrB,WAIJ,eAAC,MAAD,CAAKwQ,GAAI,EAAG5J,UAAU,0CAAtB,UACI,cAAC,IAAD,CAAM8J,GAAG,oBAAT,SACI,cAAC,SAAD,CAAQC,QAAQ,UAAhB,SACKxH,KAAK/F,MAAMwE,gBAAgBjE,OAAS,cAAC,IAAD,CAAkB3D,GAAG,aAAgB,cAAC,IAAD,CAAkBA,GAAG,+BAGvG,cAAC,SAAD,CAAQ4G,UAAU,oCAAoC+J,QAAQ,UAAUpF,QAASpC,KAAK+G,oBAAtF,SACK3P,UAKb,qBAAKmL,MAAO,CAAEkF,UAAW,UACzB,cAAC,GAAD,CAAa7D,cAAe5D,KAAK/F,MAAM2J,cAAeiB,aAAc7E,KAAK5F,MAAMyK,aAAc/B,QAAS9C,KAAK5F,MAAMqE,gBAAiBA,gBAAiBuB,KAAK/F,MAAMwE,iC,GAtF1JoD,a,iDCXhC6F,GAAe,EAENC,GAAmB,SAACnP,GAE7B,OADAkP,IAA8B,EAE1B,cAACE,GAAA,EAAD,CAAYC,WAAS,EAAChR,GAAI6Q,GAAcnF,MAAO,CAAEuF,aAAc,OAA/D,SACKtP,GAAQ4C,OAAO2H,KAAKvK,GAAMgC,OAAS,EAEhCuN,GAAcvP,GAEVwP,GAAYxQ,EAAsB,EAAGgB,EAAI,KAEzC4C,OAAO2H,KAAKvK,GAAMgE,QAAO,SAAAyL,GAAG,OAAIC,GAAYD,MAAMhL,KAAI,SAACgL,EAAK7I,GACxD,IAAI+I,EACAC,EAoBJ,OAnBIC,GAAU7P,IAASyP,IAAQhN,OAAOgN,IAAwB,IAAhBhN,OAAOgN,KAC9CzP,EAAKyP,MACJE,EAAYG,GAAiB9P,EAAKyP,OACjBhN,OAAOkN,UACpBC,EAAU,eAAO5P,EAAKyP,KACL,aAEjBE,EAAYF,EACZG,EAAa5P,EAAKyP,KAGtBE,IAAclN,OAAOkN,IAAoC,IAAtBlN,OAAOkN,MAE1CA,GADAA,EAAYlN,OAAOkN,GAAa,GACVI,cAG1BJ,EAAYF,EACZG,EAAa5P,EAAKyP,IAEdD,GAAYG,EAAW/I,EAAOgJ,MAG9C,+BAAOzQ,OAKjB2Q,GAAmB,SAACE,GACtB,GAAIA,GACWpN,OAAO2H,KAAKyF,GACdrF,SAAS,eAAgB,CAC9B,IAAIsF,EAAMD,EAAO,aAAmBA,EAAO,YAAgBE,MAAM,KACjE,GAAID,GAAOA,EAAIjO,OAAS,EACpB,OAAIiO,EAAI,IAAMA,EAAI,GAAGtL,QAAQ,KAClBsL,EAAI,GAAGE,QAAQ,IAAK,KAEpBF,EAAI,KAOzBJ,GAAY,SAAC7P,GACf,QAAIA,KACIoQ,MAAMC,QAAQrQ,IAUpBwP,GAAc,SAACc,EAAQC,EAAUvQ,GACnC,OACI,eAACwQ,GAAA,EAAD,CAAOzN,SAAUwN,EAAjB,UACKE,GAAmBH,EAAQtQ,GAExB0Q,GAAS1Q,IAET2Q,GAAgB3Q,GAAM,KALEuQ,IAWlCE,GAAqB,SAACH,EAAQtQ,GAChC,OACI,cAACwQ,GAAA,EAAMI,QAAP,UACKF,GAAS1Q,KAAUuP,GAAcvP,GAE9B6Q,GAAuBP,GAEvBQ,GAAiBR,EAAQtQ,MAKnC8Q,GAAmB,SAACR,EAAQtQ,GAC9B,OACI,cAACwQ,GAAA,EAAMhE,MAAP,UACI,eAACuE,GAAA,KAAKC,IAAN,CAAU/L,UAAU,YAAY8E,MAAO,CAAEE,QAAS,OAAQgH,SAAU/R,GAApE,UACI,cAAC6R,GAAA,KAAKG,IAAN,CAAUnH,MAAO,CAAEoH,MAAO,MAAOC,WAAY,SAAUC,UAAW,cAAlE,SACI,8BACI,iCACK9B,GAAcvP,IAASsR,GAAUhB,GAElC,SAAgBA,EAAOiB,OAAO,GAAGC,cAAgBlB,EAAOmB,MAAM,GAE9DnB,EAAOiB,OAAO,GAAGC,cAAgBlB,EAAOmB,MAAM,SAK1D,cAACV,GAAA,KAAKG,IAAN,CAAUnH,MAAO,CAAEoH,MAAO,MAAOC,WAAY,QAA7C,SAEI7B,GAAcvP,GAEd0R,GAAoB1R,EAAKhB,EAAqByL,gBAE9CiH,GAAoB1R,WAQlC6Q,GAAyB,SAACP,GAC5B,OACI,cAACE,GAAA,EAAMhE,MAAP,CAAamF,QAAM,EAAC5H,MAAO,CAACqH,WAAY,QAASH,SAAU/R,GAA3D,SACI,+BAAM,iCAASoR,EAAOiB,OAAO,GAAGC,cAAgBlB,EAAOmB,MAAM,UAKnEd,GAAkB,SAAC3Q,EAAM0Q,GAC3B,OAAIA,EAEI,cAACF,GAAA,EAAM9H,KAAP,CAAYkJ,aAAW,EAAvB,SACKzC,GAAiBnP,KAKtB,cAACwQ,GAAA,EAAM9H,KAAP,CAAYkJ,aAAW,EAAvB,SACI,+BAAO5R,OAMjB0R,GAAsB,SAAC1R,GACzB,OAAa,OAATA,QAA0B6R,IAAT7R,EACV,uCACgB,mBAATA,EACP,+BAAOA,EAAK+P,aACI,kBAAT/P,EACV8R,GAA0B9R,GACnB,qBAAK+R,IAAK1S,2BAAuCW,EAAMmR,MRoBxC,OQpBmEpG,ORmBlE,OQnB+FiH,IAAI,UACpHC,GAAOjS,GACN,+BAAO4L,KAAO,IAAIC,KAAK7L,IAAO+L,OAAOjN,KAEzC,sBAAMiL,MAAO,CAAEsH,UAAW,cAA1B,SAA2CrR,IAC3B,kBAATA,EACP,+BAAOA,IACS,kBAATA,EACPA,EAEA,wCAITiS,GAAS,SAACC,GACZ,SAAGA,GACIA,GAAcA,EAAWC,SAAS,MAA8B,KAAtBD,EAAWlQ,QAAqD,KAApCkQ,EAAWhC,MAAM,KAAK,GAAGlO,QAAqD,KAApCkQ,EAAWhC,MAAM,KAAK,GAAGlO,SAO9I8P,GAA4B,SAACM,GAAY,IAAD,iBACvBrT,GADuB,IAC1C,gCAASsT,EAAT,QACI,GAAID,EAAOZ,cAAcW,SAASE,GAC9B,OAAO,GAH2B,8BAI1C,OAAO,GAGL3B,GAAW,SAAC1Q,GACd,QAAIA,GACoB,kBAATA,GAUbuP,GAAgB,SAAC+C,GACnB,IAAI/H,EAAO+H,GAAU1P,OAAO2H,KAAK+H,GACjC,SAAI/H,GAAQA,EAAKI,SAAS,QAAUJ,EAAKI,SAAS,YAAcJ,EAAKI,SAAS,QACtE5L,EAAwB4L,SAAS2H,EAAM,IAAQd,iBAOrDF,GAAY,SAAC7B,GACf,SAAIA,GAAOhN,OAAOgN,IAAQhN,OAAOgN,IAAQ,IAKvCC,GAAc,SAACD,GACjB,OAAQxQ,EAAoB0L,SAAS8E,ICtNpB8C,G,kDACjB,WAAY9Q,GAAQ,IAAD,8BACf,cAAMA,IAiBV+Q,UAAY,SAAC5L,GACL,EAAKhF,MAAM6Q,kBAAkBC,eAAiB,EAAK9Q,MAAM6Q,kBAAkBC,cAAc1Q,OAAS,GAClG,EAAK2Q,0BAA0B,EAAK/Q,MAAMgR,YAAYhM,IAE1D,EAAKnF,MAAMoR,gBAAgBjM,IAtBZ,EAyBnBkM,cAzBmB,sBAyBH,4BAAAlT,EAAA,sEACOU,IADP,OACNN,EADM,OAEZ,EAAKmC,SAAS,CAAE4Q,WAAY/S,IAFhB,2CAzBG,EAmCnByN,kBAnCmB,sBAmCC,sBAAA7N,EAAA,sDAChB,EAAKkT,gBADW,2CAnCD,EAuCnBH,0BAvCmB,uCAuCS,WAAOK,GAAP,eAAApT,EAAA,sEACcY,EAAuC,EAAKiB,MAAMvB,eAAgB8S,GADhF,OAClBC,EADkB,OAEpBD,IAAS,EAAKvR,MAAMhB,UACpB,EAAK0B,SAAS,CAAEsQ,kBAAkB,eAAMQ,KAExC,EAAK9Q,SAAS,CAAE+Q,0BAA0B,eAAMD,KAL5B,2CAvCT,wDAgDnBE,mBAhDmB,uCAgDE,WAAO1L,EAAWC,GAAlB,eAAA9H,EAAA,0DACf,EAAK6B,MAAMvB,iBAAkB,EAAKuB,MAAMhB,UADzB,mBAEbgH,EAAUvH,iBAAmB,EAAKuB,MAAMvB,gBAAkBuH,EAAUhH,YAAc,EAAKgB,MAAMhB,UAFhF,gCAGuBD,EAAuC,EAAKiB,MAAMvB,eAAgB,EAAKuB,MAAMhB,WAHpG,OAGTwS,EAHS,OAIf,EAAK9Q,SAAS,CAAEsQ,kBAAkB,eAAMQ,KACxC,EAAK9Q,SAAS,CAAE+Q,0BAA0B,eAAMD,KAChD,EAAKxR,MAAMoR,gBAAgB,GAC3B,EAAK1Q,SAAS,CAAEyQ,YAAa,CAAC,EAAKnR,MAAMhB,aAP1B,2CAhDF,wDAEf,EAAKmB,MAAQ,CACTwR,MAAM,EACN9E,gBAAiB,GACjB/M,SAAU,GACV0E,gBAAiB,GACjBjB,uBAAwB,KACxBqO,qBAAsB,EAAK5R,MAAM6R,UACjCb,kBAAmB,GACnBM,WAAW,GACXH,YAAa,CAAC,EAAKnR,MAAMhB,WACzByS,0BAA0B,IAE9B,EAAKV,UAAY,EAAKA,UAAU5D,KAAf,gBACjB,EAAK+D,0BAA4B,EAAKA,0BAA0B/D,KAA/B,gBAflB,E,qDA8BnB,SAAkBoE,GAEd,OADmBxL,KAAK5F,MAAMmR,WAAW/O,QAAO,SAAAwG,GAAI,OAAIA,EAAKwI,OAASA,KACpD,GAAG9M,O,oBA4BzB,WAAU,IAAD,OACL,OACI,mCACI,eAAC,QAAD,CAAOqN,gBAAgB,sBAAsBH,KAAM5L,KAAK/F,MAAM2R,KAAMI,OAAQhM,KAAK/F,MAAM+R,OAAvF,UACI,cAAC,QAAMjL,OAAP,UACI,cAAC,QAAMiE,MAAP,UAAchF,KAAK5F,MAAM6Q,mBAAqB7P,OAAO2H,KAAK/C,KAAK5F,MAAM6Q,mBAAmBzQ,OAAS,GAAKwF,KAAK/F,MAAMgS,iBAAiBjM,KAAK5F,MAAM6Q,uBAGjJ,eAAC,QAAM/J,KAAP,WACI,qBACIzD,UAAU,uCACVE,KAAK,SACL2E,SAAU,IAGd,8BACI,eAAC,OAAD,CAAMzL,GAAI,KAAMqV,UAAWlM,KAAK/F,MAAMkS,aAAcC,SAAUpM,KAAKgL,UAAnE,UACKhL,KAAK5F,MAAM6Q,mBAAqBjL,KAAK5F,MAAM6Q,kBAAkBoB,OAAS,cAAC,MAAD,CAAK9Q,SAAU,EAAG+L,MAAOtH,KAAKsM,kBAAkBtM,KAAK5F,MAAM6Q,kBAAkBoB,QAAQ3D,MAAM,KAAK,GAAInG,MAAO,CAAEgK,UAAW,OAAQhJ,OAAQ,QAASiJ,UAAW,UAA5J,SAClE7E,GAAiB3H,KAAK5F,MAAM6Q,qBACxB,cAAC,MAAD,CAAK1P,SAAU,EAAG+L,MAAM,UAAU/E,MAAO,CAAEgK,UAAW,OAAQhJ,OAAQ,QAASiJ,UAAW,UAA1F,SACJ7E,GAAiB3H,KAAK5F,MAAM6Q,qBAEhCjL,KAAK5F,MAAM6Q,mBAAqBjL,KAAK5F,MAAM6Q,kBAAkBC,eAAiBlL,KAAK5F,MAAM6Q,kBAAkBC,cAAc1Q,OAAS,GAAKwF,KAAK5F,MAAM6Q,kBAAkBC,cAAcjO,KAAI,SAACwP,EAASC,GAE7L,OADA,EAAKtS,MAAMgR,YAAY1O,KAAK+P,EAAQ5V,IAC7B,cAAC,MAAD,CAAiB0E,SAAUmR,EAAI,EAAGpF,MAAO,EAAKgF,kBAAkBG,EAAQJ,QAAQ3D,MAAM,KAAK,GAAInG,MAAO,CAAEgK,UAAW,OAAQhJ,OAAQ,QAASiJ,UAAW,UAAvJ,SACF7E,GAAiB,EAAKvN,MAAMsR,4BADhBgB,EAAI,cAQrC,cAAC,QAAMC,OAAP,UACI,cAAC,SAAD,CAAQnF,QAAS,UAAWpF,QAASpC,KAAK/F,MAAM+R,OAAhD,SACA,cAAC,IAAD,CAAkBnV,GAAG,wB,GA/FGgL,a,UCO1C+K,G,kDAEJ,WAAY3S,GAAQ,IAAD,8BACjB,cAAMA,IA4BRgM,kBA7BmB,sBA6BC,sBAAA7N,EAAA,sEAAkB,EAAKyU,4BAAvB,mFA7BD,EA+BnBC,qBAAuB,kBAAM,EAAKC,oBAAoB,YA/BnC,EAiCnBpB,mBAjCmB,uCAiCE,WAAO1L,EAAWC,GAAlB,SAAA9H,EAAA,0DACf6H,EAAUzC,yBAA2B,EAAKvD,MAAMuD,wBAClD0C,EAAUtH,WAAa,EAAKwB,MAAMxB,WAAa,EAAKwB,MAAM4S,eAC1D,EAAKrS,SAAS,CAAEhC,KV7CF,EU6CcsU,UV7Cd,EU6C+BC,qBV7C/B,GU6Cd,sBACE,sBAAA9U,EAAA,sEACQ,EAAK+U,kBADb,4CAKAjN,EAAUvH,OAAS,EAAKyB,MAAMzB,MAAS,EAAKyB,MAAM4S,aATnC,gCAWX,EAAKG,kBAXM,2CAjCF,0DAyDnBJ,oBAAsB,SAACK,GAAmB,IAAD,iBACxBC,SAASC,uBAAuB,oCADR,IACvC,2BAAmF,SAC9E/K,MAAMgL,WAAaH,GAFe,gCAzDtB,EAiFnBI,qBAAuB,SAACC,GACtB,OAAOA,EAAmBjR,QAAO,SAAAsI,GAAE,OAAIA,EAAGsB,IAAIC,WAAW,aAlFxC,EAqFnBhE,KArFmB,uCAqFZ,WAAOS,GAAP,SAAA1K,EAAA,sDACH,EAAKuC,SAAS,CAAEiR,MAAM,EAAM8B,sBAAuB5K,EAAU6K,kBAAmB7K,GAAWA,EAAQjM,GAAIsV,aAAc,IADlH,2CArFY,wDAyFnByB,MAAQ,WACN,EAAKjT,SAAS,CAAEiR,MAAM,KA1FL,EA6FnBP,gBAAkB,SAACvQ,GACjB,EAAKH,SAAS,CAACwR,aAAcrR,KA9FZ,EAiGnB+S,2BAjGmB,uCAiGU,WAAOnV,GAAP,eAAAN,EAAA,yDAC3B,EAAK0V,YAAc,GACnB,EAAKnT,SAAS,CAAEoT,SAAU,GAAItP,gBAAiB,KACzCuP,EAAWtV,EAAe,GAChC,EAAKiC,SAAS,CAAE6C,uBAAwB9E,KACpCsV,IAAYA,EAASlT,MALE,iCAMnB,EAAKmT,4BAA4BD,EAASlT,OANvB,OAOzB,EAAKb,MAAMiU,uBAAuBF,EAASlT,OAPlB,wBASzB,EAAKb,MAAMiU,uBAAuB,MATT,QAW3B,EAAKvT,SAAS,CAAEgT,uBAAmBtD,EAAW6C,qBVrH9B,IU0GW,4CAjGV,wDA+GnBe,4BA/GmB,uCA+GW,WAAOvV,EAAgBC,EAAMC,GAA7B,eAAAR,EAAA,sEACFK,EAAYC,EAAgBC,EAAMC,GADhC,OACtBuV,EADsB,OAE5B,EAAKxT,SAAS,CACZoT,SAAUI,EAAYC,QACtBC,SAAUF,EAAY9T,WAAWiU,UACjC3V,KAAMwV,EAAYC,QAAQ5T,OAAS2T,EAAY9T,WAAW1B,KAAO,EAEjEuU,qBAAsBiB,EAAYC,QAAQ5T,OAAS2T,EAAY9T,WAAW1B,KAAO,EACjFC,SAAUuV,EAAY9T,WAAWzB,SACjC2V,WAAYJ,EAAY9T,WAAWmU,QATT,2CA/GX,4DAgInBnL,mBAAqB,cAAGC,YAAH,IAAgBlB,EAAhB,EAAgBA,QAAhB,OACnB,wBACEM,KAAK,SACLH,MAAO,CAAEzD,SAAU,WAAYyE,OAAQ,OAAQC,IAAK,MAAOC,MAAO,MAAOC,OAAQ,uBACjFtB,QAAS,SAAC1H,GACRA,EAAEsH,iBACFI,EAAQ1H,IALZ,SAOC,sBAAM+C,UAAU,wBAxIA,EA+InBzC,QAAU,SAAAF,GACR,IAAMnC,EAAOsC,OAAOH,GACpB,IACGG,OAAOC,MAAMJ,IACJ,KAAVA,GACAnC,EAAO,GACPA,GAAQ,EAAKuB,aACb,CACA,IAAIiB,EAAqBC,OAAOC,OAAO,GAAI,EAAKjB,MAAMC,YACtDc,EAAmBxC,KAAOA,EAC1B,EAAKgC,SAAS,CAAEN,WAAYc,EAAoBP,gBAAiBjC,MAzJlD,EA6JnB8V,gBA7JmB,uCA6JD,WAAO/T,GAAP,eAAAtC,EAAA,yDAChBsC,EAAEsH,kBAEE,EAAK5H,MAAMsU,YAHC,gCAIaxV,EACzB,EAAKkB,MAAMoD,uBAAuB,GAAG1C,MACrC,EAAKV,MAAMsU,YAAa,EAAKZ,YV5KjB,EACI,GUqKJ,OAIRa,EAJQ,OAQd,EAAKC,wBAAwBD,GARf,sBAUd,EAAKV,4BAA4B,EAAK7T,MAAMoD,uBAAuB,GAAG1C,OAVxD,2CA7JC,wDA2KnB+T,kBAAoB,SAACnU,GACnBA,EAAEsH,iBACF,EAAKrH,SAAS,CAAE+T,YAAahU,EAAEG,OAAOC,SA7KrB,EAgLnBQ,gBAAkB,SAAC1C,GACjB,EAAK+B,SAAS,CAAEqS,cAAc,IAC9B,EAAKrS,SAAS,CAAC/B,cAlLE,EAqLnB6B,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAEuS,qBAAsBxS,EAAEG,OAAOC,SAtL9B,EAyLnBC,SAAW,YACJ,EAAKX,MAAM8S,sBAAwB,EAAK9S,MAAM8S,sBAAwB,EAAK9S,MAAMiU,UACpF,EAAK1T,SAAS,CAAEhC,MAAO,EAAKyB,MAAM8S,wBA3LnB,EAqMnBjB,iBAAmB,SAACnJ,GAClB,GAAIA,EAAS,CACX,IAAMC,EAAO3H,OAAO2H,KAAKD,GACrB1D,EAAQ2D,EAAK1G,WAAU,SAAA2G,GAAI,MAAI,UAAYA,EAAKC,iBACpD,GAAI7D,GAAS,EAEX,OADA,EAAK0O,YAAc1S,OAAO2H,KAAKD,GAAS1D,GACjC0D,EAAQ1H,OAAO2H,KAAKD,GAAS1D,IAGpC,IADAA,EAAQ2D,EAAK1G,WAAU,SAAA2G,GAAI,MAAI,SAAWA,EAAKC,mBAClC,EAEX,OADA,EAAK6K,YAAc1S,OAAO2H,KAAKD,GAAS1D,GACjC0D,EAAQ1H,OAAO2H,KAAKD,GAAS1D,IAEpC,IAAM8D,EAAcH,EAAKvG,QAAO,SAAAwG,GAAI,OAAKvL,EAAoB0L,SAASH,MACtE,GAAIE,GAAeA,EAAY1I,OAE7B,OADA,EAAKsT,YAAc5K,EAAY,GACxBJ,EAAQI,EAAY,IAMnC,OADA,EAAK4K,YAAc,GACZ,KA3NU,EA8NnBgB,YAAc,SAAChM,GACb,OAAI,EAAK1I,MAAMqE,iBAAmB,EAAKrE,MAAMqE,gBAAgB5H,GACnD,uBAAO8L,SAAU,WACvB,EAAKhI,SAAS,CAAE8D,gBAAiBqE,KAEjCJ,KAAK,QAAQ7L,GAAIiM,EAAQjM,GAAI6H,KAAK,UAAU5D,MAAOgI,EAAQjM,GAC3DkY,eAAgB,EAAK3U,MAAMqE,gBAAgB5H,KAAOiM,EAAQjM,KAGpD,uBAAO8L,SAAU,WACvB,EAAKhI,SAAS,CAAE8D,gBAAiBqE,KAEjCJ,KAAK,QAAQ7L,GAAIiM,EAAUA,EAAQjM,GAAI6H,KAAK,UAAU5D,MAAOgI,EAAQjM,MA1OxD,EA+OnBmY,iBAAmB,SAAAC,GAAoB,EAAKtU,SAAS,CAAEqS,cAAc,IAAU,EAAKkC,WAAWD,IA/O5E,EA6PnBE,YAAc,WACZ,EAAKlV,MAAMmV,WAAW,CAAC,EAAKhV,MAAMqE,kBAClC,EAAKxE,MAAMoV,kBAAkB,EAAKjV,MAAMoD,yBA7PxC,EAAKpD,MAAQ,CACXzB,KVZc,EUaduU,qBVbc,EUcdtU,SVbkB,EUclB2V,WVboB,GUcpBF,SVbkB,EUclBpB,UVbmB,EUcnBrS,gBVbyB,EUezBgR,MAAM,EACNO,aAAc,EAEduB,sBAAuB,GACvBgB,YAAa,GACbY,YAAa,GACbtC,cAAc,EAEdtU,eAAgB,GAChB8E,uBAAwB,GACxBuQ,SAAU,GACVtP,gBAAiB,KACjBkP,kBAAmB,IAGrB,EAAKG,YAAc,GA1BF,E,oGAgDnB,sBAAA1V,EAAA,sEACQ4H,KAAKuP,yBADb,UAEEvP,KAAK+M,oBAAoB,WACrB/M,KAAK/F,MAAM+T,SAASxT,OAH1B,uBAIIwF,KAAKrF,SAAS,CAAE6C,uBAAwBwC,KAAK/F,MAAM+T,SAAUvP,gBAAiBuB,KAAK/F,MAAMuV,aAAa,KAJ1G,SAKUxP,KAAKiO,4BAA4BjO,KAAK/F,MAAM+T,SAAS,GAAGlT,MAAOkF,KAAK5F,MAAMzB,KAAMqH,KAAK5F,MAAMxB,UALrG,gD,0HAeA,4BAAAR,EAAA,0DACM4H,KAAK8N,cAAe9N,KAAK5F,MAAMsU,YADrC,gCAE+BxV,EACzB8G,KAAK5F,MAAMoD,uBAAuB,GAAG1C,MACrCkF,KAAK5F,MAAMsU,YAAa1O,KAAK8N,YAAa9N,KAAK5F,MAAMzB,KAAMqH,KAAK5F,MAAMxB,UAJ5E,OAEU+V,EAFV,OAMI3O,KAAK4O,wBAAwBD,GANjC,sCAQU3O,KAAKiO,4BAA4BjO,KAAK5F,MAAMoD,uBAAuB,GAAG1C,MAAQkF,KAAK5F,MAAMzB,KAAcqH,KAAK5F,MAAMzB,KVhF1G,EUgFgHqH,KAAK5F,MAAMxB,UAR7I,gD,iIAYA,gCAAAR,EAAA,sEAC6CD,IAD7C,gBACgBsV,EADhB,EACUjV,KACFiX,EAAwBzP,KAAKwN,qBAAqBC,GACxDzN,KAAKrF,SAAS,CAAEjC,eAAgB+W,EAAsBxS,KAAI,SAAA6H,GAAE,MAAK,CAAE3F,MAAO2F,EAAG4B,KAAKzH,YAAanE,MAAOgK,EAAG4B,KAAKgJ,mBAHhH,gD,8EAgEA,SAAW/W,GACTqH,KAAKrF,SAAS,CAAEhC,KAAMA,EAAMuU,qBAAsBvU,M,qCAqGpD,SAAwBgW,GACtB3O,KAAKrF,SAAS,CACZoT,SAAUY,EAAaP,QACvBC,SAAUM,EAAatU,WAAWiU,UAClC3V,KAAMgW,EAAaP,QAAQ5T,OAASmU,EAAatU,WAAW1B,KAAO,EACnEuU,qBAAsByB,EAAaP,QAAQ5T,OAASmU,EAAatU,WAAW1B,KAAO,EACnFC,SAAU+V,EAAatU,WAAWzB,SAClC2V,WAAYI,EAAatU,WAAWmU,MACpCxB,cAAc,M,oBASlB,WAAU,IAAD,OACPtT,QAAQC,IAAI,+BAAgCqG,KAAK5F,OACjD,IL/OgCH,EK+O1BI,EAAa,CACjB1B,KAAMqH,KAAK5F,MAAMzB,KACjBwB,QAAS6F,KAAK5F,MAAMxB,SACpBmH,eAAgBpJ,GAEZ+K,EAAuC,IAA1B1B,KAAK5F,MAAMmU,WAAmB,GAAMvO,KAAK5F,MAAMzB,KAAO,GAAKqH,KAAK5F,MAAMxB,SAAY,EAC/F+I,EAAWrH,KAAKqV,IAAI3P,KAAK5F,MAAMzB,KAAOqH,KAAK5F,MAAMxB,SAAUoH,KAAK5F,MAAMmU,YACtEqB,EAAa5P,KAAK5F,MAAMqE,mBAAqBrD,OAAO2H,KAAK/C,KAAK5F,MAAMqE,iBAAiBjE,QAAUwF,KAAK5F,MAAM2T,SAASvT,QAEzH,OACE,eAAC,OAAD,WACE,cAAC,MAAD,CAAKiD,UAAU,OAAf,SACE,cAAC,MAAD,CAAKoS,GAAI,GAAT,SACE,iCACA,cAAC,IAAD,CAAkBhZ,GAAG,4BAIzB,cAAC,MAAD,CAAK4G,UAAU,OAAf,SACE,cAAC,MAAD,CAAKoS,GAAI,EAAT,SACE,6BAAI,4BAAIjZ,UAGZ,cAAC,MAAD,UACE,cAAC,MAAD,CAAKiZ,GAAI,EAAT,SACE,cAAC,KAAD,CACEhZ,GAAG,yBAEH+L,YAAa5C,KAAK/F,MAAM6V,KAAKC,cAAc,CAAElZ,GAAI,uBACjDmZ,WAAYhQ,KAAK/F,MAAM6V,KAAKC,cAAc,CAAElZ,GAAI,uBAChDoZ,QAASjQ,KAAK5F,MAAM1B,eACpBiK,SAAU3C,KAAK6N,2BACftR,SAAUyD,KAAK5F,MAAMoD,uBAPvB,SASG,gBAAG8F,EAAH,EAAGA,YAAa4M,EAAhB,EAAgBA,WAAhB,OACC,EAAK7M,mBAAmB,CAAEC,cAAalB,QAAS8N,WAMtD9U,OAAO2H,KAAK/C,KAAK5F,MAAMoD,wBAAwBhD,OAAS,GACxD,qCACE,cAAC,MAAD,CAAKiD,UAAU,OAAf,SACE,cAAC,MAAD,CAAKoS,GAAI,EAAT,SACE,oBAAItN,MAAO,CAAEuF,aAAc,OAA3B,SAAoC,iCAAS9H,KAAK5F,MAAMoD,wBAA0BwC,KAAK5F,MAAMoD,uBAAuB,IAAMwC,KAAK5F,MAAMoD,uBAAuB,GAAG2B,cAGnK,cAAC,MAAD,UACE,cAAC,MAAD,CAAK0Q,GAAI,GAAT,SACE,qBACEpS,UAAU,sBACVE,KAAK,SACL2E,SAAU,EACVC,MAAO,CAAEC,OAAQ,aAJnB,SAME,iCACE,sBAAKD,MAAO,CAAEE,QAAS,OAAQD,OAAQ,aAAvC,UACE,wBACE3L,GAAG,mBACH8G,KAAK,SACL,gBAAc,OACd,gBAAc,QACd+E,KAAK,SACLjF,UAAU,kCANZ,SAM+C1G,IAC/C,uBACE2L,KAAK,SACLhE,KAAK,OAELiE,SAAU3C,KAAK6O,kBACflR,KAAK,WACLF,UAAU,wCAEXmF,YAAa5C,KAAK/F,MAAM6V,KAAKC,cAAc,CAAElZ,GAAI,oBAGpD,qBAAK4G,UAAU,mBAAmB8E,MAAO,CAAEC,OAAQ,cAAnD,SACE,wBAAQ/E,UAAU,kBAAkB2E,QAASpC,KAAKyO,gBAAlD,SAAmE,cAAC,IAAD,CAAkB5X,GAAG,4BAMlG,cAAC,MAAD,CAAK4G,UAAU,OAAf,SACE,eAAC,MAAD,CAAKoS,GAAI,GAAT,UACE,wBAAOpS,UAAU,2DAAjB,UACE,gCACE,6BACGrC,OAAO2H,KAAK5L,GAAW8F,KAAI,SAAA6H,GAAE,OAAI,6BAAc3N,EAAU2N,IAAfA,UAG/C,gCACG9E,KAAK5F,MAAM2T,SAAS9Q,KAAI,SAAA6F,GACvB,OACE,+BACE,oBAAI6G,MAAM,KAAKwG,MAAM,SAArB,SACG,EAAKrB,YAAYhM,KAEpB,oBAAInF,KAAK,SAASyE,QAAS,kBAAM,EAAKC,KAAKS,IAA3C,SAAsD,EAAKmJ,iBAAiBnJ,KAC5E,oBAAInF,KAAK,SAASyE,QAAS,kBAAM,EAAKC,KAAKS,IAA3C,mBAAyDA,EAAQmB,UAAUC,UAA3E,YAAwFpB,EAAQmB,UAAUE,YAC1G,oBAAIxG,KAAK,SAASyE,QAAS,kBAAM,EAAKC,KAAKS,IAA3C,SAAsDsB,KAAO,IAAIC,KAAKvB,EAAQwB,YAAYC,OAAOjN,KACjG,oBAAIqG,KAAK,SAASyE,QAAS,kBAAM,EAAKC,KAAKS,IAA3C,SAAsDsB,KAAO,IAAIC,KAAKvB,EAAQ0B,cAAcD,OAAOjN,OAP5FwL,EAAQjM,YAYzB,qBAAK4G,UAAU,gBACf,cAAC,gBAAD,CACEgE,UAAWzB,KAAK5F,MAAMmU,WACtB7M,WAAYA,EACZC,SAAUA,EACVP,SAAS,QACT/G,WAAYA,EACZmH,cAAexB,KAAK5F,MAAMiU,SAC1B9M,eAAgBvB,KAAK5F,MAAM8S,qBAC3BkD,UAAWpQ,KAAKkP,WAChB5T,gBAAiB0E,KAAK1E,gBACtBE,YAAa,WAAQ,EAAKwT,iBAAiB,IAC3CvT,eAAgB,WAAQ,EAAKuT,iBAAiB,EAAK5U,MAAMzB,KAAO,IAChE8B,YAAauF,KAAKvF,YAClBiB,WAAY,WAAQ,EAAKsT,iBAAiB,EAAK5U,MAAMzB,KAAO,IAC5DgD,WAAY,WAAQ,EAAKqT,iBAAiB,EAAK5U,MAAMiU,WACrDtT,SAAUiF,KAAKjF,SACfsV,UL1WkBpW,EK0WY+F,KAAK/F,ML1WN,CAC3C,UAAaA,EAAM6V,KAAKC,cAAc,CAAElZ,GAAI,kBAC5C,aAAgBoD,EAAM6V,KAAKC,cAAc,CAAElZ,GAAI,qBAC/C,YAAeoD,EAAM6V,KAAKC,cAAc,CAAElZ,GAAI,oBAC9C,SAAYoD,EAAM6V,KAAKC,cAAc,CAAElZ,GAAI,iBAC3C,SAAYoD,EAAM6V,KAAKC,cAAc,CAAElZ,GAAI,iBAC3C,QAAWoD,EAAM6V,KAAKC,cAAc,CAAElZ,GAAI,gBAC1C,GAAMoD,EAAM6V,KAAKC,cAAc,CAAElZ,GAAI,oBKuW7B,eAAC,MAAD,CAAK4G,UAAU,6CAAf,UACE,cAAC,MAAD,CAAK6S,GAAI,IAET,cAAC,MAAD,CAAKA,GAAI,EAAG7S,UAAU,0CAAtB,SACE,eAAC,IAAD,CAAM8J,GAAG,IAAT,UACE,wBAAQ9J,UAAU,kBAAlB,SAAoC,cAAC,IAAD,CAAkB5G,GAAG,iBACzD,wBAAQ4G,UAAU,oDAAoD2E,QAASpC,KAAKmP,YAAaxK,SAAUiL,EAA3G,SAAuH,cAAC,IAAD,CAAkB/Y,GAAG,0BAMtJ,cAAC,GAAD,CAAoB+U,KAAM5L,KAAK5F,MAAMwR,KAAMI,OAAQhM,KAAK4N,MAAOF,sBAAuB1N,KAAK5F,MAAMsT,sBAAuBzU,UAAW+G,KAAK5F,MAAMuT,kBAC5IjV,eAAgBsH,KAAK5F,MAAMoD,wBAA0BwC,KAAK5F,MAAMoD,uBAAuBhD,QAAUwF,KAAK5F,MAAMoD,uBAAuB,GAAG1C,MACtImR,iBAAkBjM,KAAKiM,iBAAkBE,aAAcnM,KAAK5F,MAAM+R,aAAcd,gBAAiBrL,KAAKqL,yB,GAnZhFxJ,aAyZjB0O,gBAAW3D,I,UCtaX,IACX,cAAe,UACf,WAAY,OACZ,WAAY,OACZ,cAAe,aACf,kBAAmB,eACnB,4BAA6B,2BAC7B,yBAA0B,uBAC1B,oBAAqB,kBACrB,oBAAqB,iBACrB,aAAc,SACd,uBAAwB,yBACxB,qBAAsB,mBACtB,0BAA2B,uBAC3B,kBAAmB,eACnB,aAAc,SACd,kBAAmB,gBACnB,2BAA4B,2BAC5B,aAAc,SACd,iBAAkB,cAClB,aAAc,SACd,aAAc,SACd,YAAa,QACb,qBAAsB,kBACtB,WAAY,OACZ,WAAY,eACZ,qBAAsB,mBACtB,sBAAuB,oBACvB,gBAAiB,aACjB,mBAAoB,gBACpB,kBAAmB,eACnB,eAAgB,YAChB,eAAgB,YAChB,cAAe,WACf,SAAU,KACV,SAAS,MCnCE,IACX,cAAe,YACf,WAAY,eACZ,WAAY,OACZ,cAAe,YACf,kBAAmB,oBACnB,4BAA6B,oCAC7B,yBAA0B,+BAC1B,oBAAqB,2BACrB,oBAAqB,sBACrB,aAAc,cACd,uBAAwB,6BACxB,qBAAqB,uBACrB,0BAA2B,uBAC3B,kBAAmB,kBACnB,aAAc,UACd,kBAAmB,mBACnB,2BAA4B,iCAC5B,aAAc,UACd,iBAAkB,kBAClB,aAAc,YACd,aAAc,YACd,YAAa,UACb,qBAAsB,oBACtB,WAAY,QACZ,WAAY,sBACZ,qBAAsB,2BACtB,sBAAuB,0BACvB,gBAAiB,eACjB,mBAAoB,oBACpB,kBAAmB,kBACnB,eAAgB,oBAChB,eAAgB,gBAChB,cAAe,aACf,SAAU,KACV,SAAS,MCsDE4D,G,kDA7EX,WAAYvW,GAAQ,IAAD,8BACf,cAAMA,IAcVgM,kBAAoB,WAChB,EAAKwK,aAhBU,EAoBnB9E,mBAAqB,SAAC1L,EAAWC,GACzBD,EAAUpG,SAAW,EAAKI,MAAMJ,QAChC,EAAK4W,aAtBM,EA0BnBrB,WAAa,SAAC5W,GACV,EAAKmC,SAAS,CAAE8D,gBAAiBjG,IAC7BA,EAAKgC,QAAQ,EAAKG,SAAS,CAAEkL,kBAAmBrN,EAAK,GAAG3B,MA5B7C,EA+BnBqX,uBAAyB,SAACwC,GACtB,EAAK/V,SAAS,CAAEiM,oBAAqB8J,EAAahS,KAAMgS,EAAajL,QAASiL,KAhC/D,EAmCnB9M,cAAgB,SAAC+M,GACb,EAAKhW,SAAS,CAAE2K,mBAAoBqL,KApCrB,EAuCnBtB,kBAAoB,SAACrB,GACjB,EAAKrT,SAAS,CAAEjC,eAAgBsV,KAxCjB,EA2CnByC,UAAY,WACR,IAAMG,EAAa,EAAK3W,MAAMJ,QAAU,EAAKI,MAAMJ,OAAOwS,OACtDuE,EAAWpW,QACX,EAAKG,SAAS,CAAE0R,OAAQuE,KA5C5B,EAAKxW,MAAQ,CACTqE,gBAAiB,GACjBoH,kBAAmB,EACnBP,mBAAoB,UACpBsB,oBAAqB,KACrBlI,KAAM,GACN+G,QAAS,aACT/M,eAAgB,GAChB2T,OAAO,KACPgE,SAAS,CAAEQ,MAAIC,QAXJ,E,0CAkDnB,WACI,OACI,cAAC,KAAD,CAAczE,OAAQrM,KAAK5F,MAAMiS,OAAQgE,SAAUrQ,KAAK5F,MAAMiW,SAASrQ,KAAK5F,MAAMiS,QAAlF,SACI,mCACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO0E,KAAK,IAAIC,OAAK,EAArB,SACI,cAAC,GAAD,CAAQvS,gBAAiBuB,KAAK5F,MAAMqE,gBAAiBmF,cAAe5D,KAAK4D,cACrEgD,oBAAqB5G,KAAK5F,MAAMwM,wBAExC,cAAC,IAAD,CAAOmK,KAAK,oBAAoBC,OAAK,EAArC,SACI,cAAC,GAAD,CACI5B,WAAYpP,KAAKoP,WACjBlB,uBAAwBlO,KAAKkO,uBAC7BrI,kBAAmB7F,KAAK5F,MAAMyL,kBAC9BwJ,kBAAmBrP,KAAKqP,kBACxBrB,SAAUhO,KAAK5F,MAAM1B,eACrB8W,aAAcxP,KAAK5F,MAAMqE,iC,GArE3CoD,a,wDCNZoP,G,kDACF,aAAe,IAAD,6BACV,eADU,+GAMJ,CACN5E,OAAQ,QALR,EAAK6E,aAAetP,IAAMuP,YAC1B,EAAKC,WAAa,KAHR,E,4DAkBd,SAAyB1S,EAAM2S,EAAUC,GACrC,YAAAtR,KAAA,QAAmBsR,GACnBC,IAASC,OAAO,cAAC,GAAD,CAAKC,IAAKzR,KAAKkR,aAAcrX,OAAM,YAAEmG,KAAF,UAAoBA,KAAKoR,c,kBAGhF,WACI,OAAOpR,KAAKkR,aAAaQ,QAAU1R,KAAKkR,aAAaQ,QAAQtX,MAAQ,I,IAGzE,SAAWU,GACP,OAAOkF,KAAKkR,aAAaQ,QAAQ/W,SAASG,K,+BAG9C,WACIkF,KAAKoR,WAAa/D,SAASsE,cAAc,OACzC3R,KAAK4R,YAAY5R,KAAKoR,YACtBG,IAASC,OAAO,cAAC,GAAD,CAAKC,IAAKzR,KAAKkR,aAAcrX,OAAM,YAAEmG,KAAF,UAAoBA,KAAKoR,e,+BApBhF,WACI,MAAO,CAAC,c,eAhBkBS,c,YAWhB/W,GACV,YAAAkF,KAAA,QAAe2F,KAAKmM,MAAMhX,GA2BlCiX,eAAezZ,IAAI,iCAAmCyZ,eAAeC,OAAO,+BAAgCf,I","file":"static/js/main.aeac606d.chunk.js","sourcesContent":["import {  FormattedMessage } from \"react-intl\";\n/*********************\n * PAGINATION ********\n *********************/\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = <FormattedMessage id='app.selectCollection' />  \n\n/*********************\n * UI LABEL **********\n *********************/\n export const SELECT = <FormattedMessage id='app.select' />                                    //\n export const NAME = <FormattedMessage id='app.name' />\n export const CREATEDBY = <FormattedMessage id='app.created' />\n export const lastEdited = <FormattedMessage id='app.lastEdited' />\n export const CREATEDDATE = <FormattedMessage id='app.createdDate' />\n\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    lastEdited: lastEdited,\n    CREATEDDATE: CREATEDDATE,\n}\n\n//export const BTN_ADD_NEW_CONTENT = '';\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.addNewContent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS = [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = <FormattedMessage id='app.noDataAvailable' />","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst localeUrl = `${domain}/i18n/locales`\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    // For testing purpose only\n    return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    console.log('ET-Widget-Config', token);\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN,\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import classNames from 'classnames';\nimport { orderBy } from 'lodash';\nimport {\n    customHeaderFormattersDefinition,\n    defaultSortingOrder, Grid, paginate, PaginationRow,\n    PAGINATION_VIEW, selectionCellFormatter, sortableHeaderCellFormatter,\n    Table, tableCellFormatter, TABLE_SORT_DIRECTION\n} from 'patternfly-react';\nimport React from 'react';\nimport { compose } from 'react-recompose';\nimport * as sort from 'sortabular';\nimport * as resolve from 'table-resolver';\n\nconst mockRows = []\n\nexport class MockClientPaginationTable extends React.Component {\n    static selectRow(row) {\n        return Object.assign({}, row, { selected: true });\n    }\n    static deselectRow(row) {\n        return Object.assign({}, row, { selected: false });\n    }\n\n    constructor(props) {\n        super(props);\n\n        const getSortingColumns = () => this.state.sortingColumns || {};\n\n        const sortableTransform = sort.sort({\n            getSortingColumns,\n            onSort: selectedColumn => {\n                this.setState({\n                    sortingColumns: sort.byColumn({\n                        sortingColumns: this.state.sortingColumns,\n                        sortingOrder: defaultSortingOrder,\n                        selectedColumn\n                    })\n                });\n            },\n            // Use property or index dependening on the sortingColumns structure specified\n            strategy: sort.strategies.byProperty\n        });\n\n        const sortingFormatter = sort.header({\n            sortableTransform,\n            getSortingColumns,\n            strategy: sort.strategies.byProperty\n        });\n\n        // enables our custom header formatters extensions to reactabular\n        this.customHeaderFormatters = customHeaderFormattersDefinition;\n\n        this.state = {\n            // selectedContent \n            selectedContent: [],\n\n            // Sort the first column in an ascending way by default.\n            sortingColumns: {\n                name: {\n                    direction: TABLE_SORT_DIRECTION.ASC,\n                    position: 0\n                }\n            },\n\n            // column definitions\n            columns: [\n                {\n                    property: 'select',\n                    displayName: 'Select',\n                    header: {\n                        label: 'select',\n                        props: {\n                            index: 0,\n                            rowSpan: 1,\n                            colSpan: 1,\n                            id: 'select'\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                        // customFormatters: [selectionHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 0\n                        },\n                        formatters: [\n                            (value, { rowData, rowIndex }) => {\n                                return selectionCellFormatter(\n                                    { rowData, rowIndex },\n                                    this.onSelectRow,\n                                    `vybrat ${rowIndex}`, `vyberte řádek ${rowIndex}`\n                                );\n                            }\n                        ]\n                    }\n                },\n                {\n                    property: 'Title',\n                    displayName: 'Names',\n                    header: {\n                        label: 'Name',\n                        props: {\n                            index: 1,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 1\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'createdBy',\n                    header: {\n                        label: 'Created by',\n                        props: {\n                            index: 2,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 2\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'updatedAt',\n                    header: {\n                        label: 'Last edited',\n                        props: {\n                            index: 3,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 3\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'Type',\n                    header: {\n                        label: 'Type',\n                        props: {\n                            index: 4,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 4\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'createdAt',\n                    header: {\n                        label: 'Created date',\n                        props: {\n                            index: 5,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 5\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'status',\n                    header: {\n                        label: 'Status',\n                        props: {\n                            index: 6,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 6\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                }\n                // {\n                //     property: 'actions',\n                //     header: {\n                //         label: 'Actions',\n                //         props: {\n                //             index: 7,\n                //             rowSpan: 1,\n                //             colSpan: 2\n                //         },\n                //         formatters: [actionHeaderCellFormatter]\n                //     },\n                //     cell: {\n                //         props: {\n                //             index: 7\n                //         },\n                //         formatters: [\n                //             (value, { rowData }) => {\n                //                 // console.log(\"npm i react-recompose\", rowData);\n                //                 return [\n                //                     <Table.Actions key=\"0\">\n                //                         <Table.Button\n                //                             onClick={() => alert('clicked ' + rowData.name)}\n                //                         >\n                //                             Actions\n                //                         </Table.Button>\n                //                     </Table.Actions>,\n                //                     <Table.Actions key=\"1\">\n                //                         <Table.DropdownKebab id=\"myKebab\" pullRight>\n                //                             <MenuItem>Action</MenuItem>\n                //                             <MenuItem>Another Action</MenuItem>\n                //                             <MenuItem>Something else here</MenuItem>\n                //                             <MenuItem divider />\n                //                             <MenuItem>Separated link</MenuItem>\n                //                         </Table.DropdownKebab>\n                //                     </Table.Actions>\n                //                 ];\n                //             }\n                //         ]\n                //     }\n                // }\n            ],\n\n            // rows and row selection state\n            rows: this.props.mockRows,\n            \n            // const [reloadToken, setReloadToken] = useState(((new Date()).getTime()).toString())\n\n            selectedRows: [],\n\n            // pagination default states\n            pagination: {\n                page: 1,\n                perPage: 6,\n                perPageOptions: [6, 10, 15]\n            },\n\n            // page input value\n            pageChangeValue: 1\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.mockRows) {\n            this.setState({ rows: this.props.mockRows })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.mockRows !== prevProps.mockRows)\n            this.setState({ rows: this.props.mockRows })\n    }\n\n    totalPages = () => {\n        const { perPage } = this.state.pagination;\n        return Math.ceil(mockRows.length / perPage);\n    };\n    onPageInput = e => {\n        this.setState({ pageChangeValue: e.target.value });\n    };\n    onSubmit = () => {\n        this.setPage(this.state.pageChangeValue);\n    };\n    setPage = value => {\n        const page = Number(value);\n        if (\n            !Number.isNaN(value) &&\n            value !== '' &&\n            page > 0 &&\n            page <= this.totalPages()\n        ) {\n            let newPaginationState = Object.assign({}, this.state.pagination);\n            newPaginationState.page = page;\n            this.setState({ pagination: newPaginationState, pageChangeValue: page });\n        }\n    }\n    onPerPageSelect = (eventKey, e) => {\n        let newPaginationState = Object.assign({}, this.state.pagination);\n        newPaginationState.perPage = eventKey;\n        newPaginationState.page = 1;\n        this.setState({ pagination: newPaginationState });\n    };\n    onFirstPage = () => {\n        this.setPage(1);\n    };\n    onPreviousPage = () => {\n        if (this.state.pagination.page > 1) {\n            this.setPage(this.state.pagination.page - 1);\n        }\n    };\n    onNextPage = () => {\n        const { page } = this.state.pagination;\n        if (page < this.totalPages()) {\n            this.setPage(this.state.pagination.page + 1);\n        }\n    };\n    onLastPage = () => {\n        const { page } = this.state.pagination;\n        const totalPages = this.totalPages();\n        if (page < totalPages) {\n            this.setPage(totalPages);\n        }\n    };\n    onSelectRow = (event, row) => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const selectedRowIndex = rows.findIndex(r => r.id === row.id);\n        if (selectedRowIndex > -1) {\n            let updatedSelectedRows, updatedRow;\n            if (row.selected) {\n                updatedSelectedRows = selectedRows.filter(r => !(r === row.id));\n                updatedRow = MockClientPaginationTable.deselectRow(row);\n            } else {\n                selectedRows.push(row.id);\n                updatedSelectedRows = selectedRows;\n                updatedRow = MockClientPaginationTable.selectRow(row);\n            }\n            rows[selectedRowIndex] = updatedRow;\n            this.setState({\n                rows: rows,\n                selectedRows: updatedSelectedRows\n            });\n            onRowsLogger(rows.filter(r => r.selected));\n        }\n    };\n    onSelectAllRows = event => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const checked = event.target.checked;\n        const currentRows = this.currentRows().rows;\n\n        if (checked) {\n            const updatedSelections = [\n                ...new Set([...currentRows.map(r => r.id), ...selectedRows])\n            ];\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? MockClientPaginationTable.selectRow(r) : r;\n            });\n            this.setState({\n                // important: you must update rows to force a re-render and trigger onRow hook\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        } else {\n            const ids = currentRows.map(r => r.id);\n            const updatedSelections = selectedRows.filter(r => {\n                return !(ids.indexOf(r) > -1);\n            });\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? r : MockClientPaginationTable.deselectRow(r);\n            });\n            this.setState({\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        }\n    };\n    currentRows() {\n        const { rows, sortingColumns, columns, pagination } = this.state;\n        return compose(\n            paginate(pagination),\n            sort.sorter({\n                columns: columns,\n                sortingColumns,\n                sort: orderBy,\n                strategy: sort.strategies.byProperty\n            })\n        )(rows);\n    }\n    // TODO:\n    onRow = (row, { rowIndex }) => {\n        // IMP: Need to figure it out\n        // const { selectedRows } = this.state;\n        // IMP: For now remove later\n        this.props.setSelectedContent([row], this.props.selectedCollectionType)\n        // this.setState({ selectedContent: [row] });\n        const selectedRows = mockRows\n\n        const selected = selectedRows.indexOf(row.id) > -1;\n        return {\n            className: classNames({ selected: selected }),\n            role: 'row'\n        };\n    }\n    render() {\n        const { columns, pagination, sortingColumns, pageChangeValue } = this.state;\n        const sortedPaginatedRows = this.currentRows();\n\n        return (\n            <Grid fluid>\n                <Table.PfProvider\n                    striped\n                    bordered\n                    hover\n                    dataTable\n                    columns={columns}\n                    components={{\n                        header: {\n                            cell: cellProps => {\n                                return this.customHeaderFormatters({\n                                    cellProps,\n                                    columns,\n                                    sortingColumns,\n                                    rows: sortedPaginatedRows.rows,\n                                    onSelectAllRows: this.onSelectAllRows\n                                });\n                            }\n                        }\n                    }}\n                >\n                    <Table.Header headerRows={resolve.headerRows({ columns })} />\n                    <Table.Body\n                        rows={sortedPaginatedRows.rows}\n                        rowKey=\"id\"\n                        onRow={this.onRow}\n                    />\n                </Table.PfProvider>\n                <PaginationRow\n                    viewType={PAGINATION_VIEW.TABLE}\n                    pagination={pagination}\n                    pageInputValue={pageChangeValue}\n                    amountOfPages={sortedPaginatedRows.amountOfPages}\n                    itemCount={sortedPaginatedRows.itemCount}\n                    itemsStart={sortedPaginatedRows.itemsStart}\n                    itemsEnd={sortedPaginatedRows.itemsEnd}\n                    onPerPageSelect={this.onPerPageSelect}\n                    onFirstPage={this.onFirstPage}\n                    onPreviousPage={this.onPreviousPage}\n                    onPageInput={this.onPageInput}\n                    onNextPage={this.onNextPage}\n                    onLastPage={this.onLastPage}\n                    onSubmit={this.onSubmit}\n                />\n            </Grid>\n        );\n    }\n}\n\n// MockClientPaginationTable.propTypes = {\n//     onRowsLogger: PropTypes.func.isRequired\n// };\n\n","import React from \"react\";\n\nclass ExpandCollapse extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            values: {\n                name: ''\n            }\n        };\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.runOnFilterData(this.state.values.name);\n    };\n\n    handleInputChange = (event) => {\n        this.setState({\n            values: { [event.target.name]: event.target.value },\n        });\n    };\n\n    onClick = () => {\n        this.setState({ open: !this.state.open })\n    }\n\n    handleKeyDown() {\n\n    }\n\n    render() {\n        return (\n            <div\n                className=\"ContentsFilter well\"\n                role=\"button\"\n                tabIndex={0}\n                style={{ margin: '1rem 0rem' }}\n            >\n                <form onSubmit={this.handleSubmit}>\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                        <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">Name <span className=\"caret\"></span></button>\n                        <input\n                            type=\"search\"\n                            name=\"name\"\n                            value={this.state.values.name}\n                            onChange={this.handleInputChange}\n                            role=\"combobox\"\n                            className=\"rbt-input-main form-control rbt-input\"\n                            placeholder=\"Search Content\"\n                        />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                        <button className=\"btn btn-primary\">Search</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ExpandCollapse;\n\n// <span className={`icon fa fa-chevron-${true ? 'down' : 'right'} CollapsibleSection__title-collapse-button`} />","import { Button, Col, Row, Modal, Icon } from 'patternfly-react';\nimport React, { Component, Fragment } from 'react'\nimport { fetchContents, filterContentsByName, getCollectionTypes } from '../api/Api'\nimport { MockClientPaginationTable } from '../MockClientPaginationTable'\nimport ExpandCollapse from './ExpandCollapse'\nimport './MockModalManager.css'\n\nexport default class MockModalManager extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { show: false, collectionTypes: [], mockRows: [], selectedContent: [], selectedCollectionType: null };\n    }\n\n    // TODO: mockRows\n    runOnFilterData = async (contentName) => {\n        await filterContentsByName(this.state.selectedCollectionType, contentName).then(response => {\n            const arr = response.data.data.map(el => {\n                el.attributes.id = el.id\n                el.attributes.createdBy = 'Admin';\n                el.attributes.status = 'Published';\n                return el.attributes\n            })\n            this.setState({ mockRows: arr });\n        });\n    }\n\n    componentDidMount = () => {\n    }\n\n    close = () => {\n        this.setState({ show: false })\n    }\n\n    open = async () => {\n        this.setState({ show: true })\n\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push(element.info)\n        });\n        this.setState({ collectionTypes: contentTypeRefine })\n    }\n\n    collectionTypeOnChange = (e) => {\n        e.persist()\n        this.state.collectionTypes.forEach(async (el) => {\n            if (el.singularName === e.target.value && e.target.value) {\n                this.setState({ selectedCollectionType: el.pluralName })\n                await fetchContents(el.pluralName).then(response => {\n                    const arr = response.data.data.map(el => {\n                        el.attributes.id = el.id\n                        el.attributes.createdBy = 'Admin';\n                        el.attributes.status = 'Published';\n                        // el.attributes.type = el.singularName;\n                        return el.attributes\n                    })\n                    this.setState({ mockRows: arr });\n                });\n            }\n        })\n    }\n\n    render() {\n        // TODO:\n        return (\n            <Fragment>\n                <div>\n                    {/* TODO: Add existing content need to beremoved later */}\n                {/* <div className=\"row\" style={{marginLeft: \"0px\", marginRight: \"0px\"}}>\n                    <Col xs={6}>\n                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                            Content: -\n                        </h3>\n                    </Col>\n                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                        <Button\n                            className=\"ChooseContentBody__add--existing app-tour-step-18\"\n                            bsStyle=\"primary\"\n                            onClick={this.open}\n                        >\n                            Add existing content\n                        </Button>\n                    </Col>\n                </div> */}\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.state.show} onHide={this.close}>\n                    <Modal.Header>\n                        <button\n                            className=\"close\"\n                            onClick={this.close}\n                            aria-hidden=\"true\"\n                            aria-label=\"Close\"\n                        >\n                            <Icon type=\"pf\" name=\"close\" />\n                        </button>\n                        <Modal.Title>Select one content item</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            // onClick={onClick}\n                            // onKeyDown={handleKeyDown}\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                            {/* {<span>{name}</span> || (\n                                <FormattedMessage id={nameId} defaultMessage=\"Info\" />\n                            )} */}\n\n                        </div>\n                        <Row>\n                            <label className=\"control-label col-xs-3\" htmlFor=\"group\">\n                                {/* <FormattedMessage id=\"user.authority.groups\" /> */}Collection Type\n                            </label>\n                            <Col xs={9}>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"group\"\n                                    data-testid={\"TEST_ID_USER_AUTHORITY_MODAL.GROUP_FIELD\"}\n                                    onChange={this.collectionTypeOnChange}\n                                >\n                                    <option value={0}>Select Collection Type</option>\n                                    {\n                                        this.state.collectionTypes.length && this.state.collectionTypes.map((collectionType, idx) => {\n                                            return (\n                                                <option key={collectionType.singularName} value={collectionType.singularName}>{collectionType.pluralName}</option>\n                                            )\n                                        })\n                                    }\n                                </select>\n                            </Col>\n                        </Row>\n                        <ExpandCollapse runOnFilterData={this.runOnFilterData} />\n\n                        {/* </FormGroup> */}\n                        <MockClientPaginationTable\n                            onRowsLogger={function noRefCheck() { }}\n                            mockRows={this.state.mockRows}\n                            selectedCollectionType={this.state.selectedCollectionType}\n                            setSelectedContent={this.props.setSelectedContent}\n                            />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            bsStyle=\"default\"\n                            className=\"btn-cancel\"\n                            onClick={this.close}\n                            >\n                            Cancel\n                        </Button>\n                        <Button bsStyle=\"primary\" onClick={this.close}>\n                            Choose\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                            </div>\n            </Fragment>\n        )\n    }\n}\n","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\nexport const TableBuilder = (tableMetaData) => {\n    console.log(\"tableMetaData =>\",tableMetaData);\n}\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    // const searchByKey = '';\n    return '-';\n}\nexport const PAGINATION_MESSAGES = (props) => ({\n    \"firstPage\": props.intl.formatMessage({ id: \"app.firstPage\" }),\n    \"previousPage\": props.intl.formatMessage({ id: \"app.previousPage\" }),\n    \"currentPage\": props.intl.formatMessage({ id: \"app.currentPage\" }),\n    \"nextPage\": props.intl.formatMessage({ id: \"app.nextPage\" }),\n    \"lastPage\": props.intl.formatMessage({ id: \"app.lastPage\" }),\n    \"perPage\": props.intl.formatMessage({ id: \"app.perPage\" }),\n    \"of\": props.intl.formatMessage({ id: \"app.of\" })\n});\n","import React from \"react\";\nimport moment from 'moment';\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport {  FormattedMessage } from \"react-intl\";\nimport { getKey } from \"../helper/Helper\";\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e) => {\n        this.props.setTemplateId(e.target.value);\n    }\n\n    render() {\n        return (\n            <>\n                <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.selectedContent.length > 0 && (\n                                this.props.selectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>\n                                                <select name=\"modelId\" defaultValue={'none'} className=\"form-control\" onChange={this.onChangeTemplateId}>\n                                                {<FormattedMessage id='app.selectTemplate' >\n                                                        {(message) => <option value='none' disabled hidden>{message}</option>}\n                                                    </FormattedMessage>}                                                    {this.props.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.name\" ,\n    createdAt: \"app.created\",\n    updatedAt: \"app.lastEdited\",\n    createDate: \"app.createdDate\",\n    selectDefaultTemplate: \"app.selectDefaultTemplate\"\n    // restirctions: \"Restrictions\"\n}","import React, { Component } from 'react'\n\nimport {  FormattedMessage } from \"react-intl\";\nimport {\n    Grid,\n    Row,\n    Col,\n    Button\n} from 'patternfly-react';\nimport MockModalManager from '../ui/MockModalManager';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport { getCollectionTypes, getTemplate } from '../api/Api';\nimport { Link } from 'react-router-dom';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_TARGET_URL}`;\n\nexport default class Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContent: [],\n            name: null,\n            nameTwo: null,\n            collectionTypes: [],\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            templateList: []\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    onChangeTemplateId = (event) => {\n        this.setState({ selectedTemplateId: event.target.value })\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        this.setState({ selectedContent: selectedContentArr })\n        this.setState({ name: selectedContentArr })\n        this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n    }\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.content\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                <span> <FormattedMessage id=\"app.info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/singleconfigpage\">\n                                            <Button bsStyle=\"primary\">\n                                                {this.props.selectedContent.length ? <FormattedMessage id=\"app.edit\" /> : <FormattedMessage id=\"app.addExistingContent\" />} \n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                {/* <MockModalManager rightSide={true} setSelectedContent={this.setSelectedContent} /> */}\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable setTemplateId={this.props.setTemplateId} templateList={this.state.templateList} content={this.state.selectedContent} selectedContent={this.props.selectedContent} />\n                                {/* {\n                                    this.state.selectedContentId != 0 &&\n                                    <div style={{ marginTop: \"1rem\" }}>\n                                        <select name=\"modelId\" className=\"form-control\" onChange={this.onChangeTemplateId}>\n                                            <option value=\"default\">Default\n                                            </option>\n                                            {this.state.templatesList.map((el, idx) => {\n                                                if (el.collectiontype.toLowerCase() === this.state.name[0].Type.toLowerCase()) {\n                                                    return <option key={idx} value={el.code}>{el.templatename}</option>;\n                                                }\n                                            })}\n                                        </select>\n                                    </div>\n                                } */}\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </form>\n        )\n    }\n}\n","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Icon, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getCollectionLocaleWise, getContentDetailsByCollectionTypeAndId, getContentDetailsById, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\nimport {  FormattedMessage } from \"react-intl\";\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n        this.props.setActiveTabKey(index);\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async() =>{\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n      if (this.props.collectionType && this.props.contentId) {\n        if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n          const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n          this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n          this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n          this.props.setActiveTabKey(0);\n          this.setState({ currentCode: [this.props.contentId] })\n        }\n      }\n    }\n    \n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.props.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                        <FormattedMessage id='app.ok'/>\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import {\n  Col, Grid, PaginationRow, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";\nimport { PAGINATION_MESSAGES } from '../helper/Helper';\n\nclass SingleContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      // Modal State\n      show: false,\n      activeTabKey: 0,\n\n      contentDetailsOnModal: {},\n      searchQuery: '',\n      setSearchBy: '',\n      searchBtnClk: false,\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: null,\n      contentIdForModal: ''\n\n    }\n    this.searchByKey = ''\n  }\n\n  componentDidMount = async () => await this.initSingleContentListPage();\n\n  componentWillUnmount = () => this.shouldShowEtSaveBtn('visible');\n\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.doContentSearch();\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      // this.setState({ selectedContent: null }); Commented on edit to cache the content/record\n      await this.doContentSearch();\n    }\n  }\n\n  async initSingleContentListPage() {\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n    if (this.props.collType.length) {\n      this.setState({ selectedCollectionType: this.props.collType, selectedContent: this.props.selectedCont[0] });\n      await this.getContentsByCollectionType(this.props.collType[0].value, this.state.page, this.state.pageSize);\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  async doContentSearch() {\n    if (this.searchByKey && this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, this.state.page, this.state.pageSize\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, !this.state.page ? PAGE : this.state.page, this.state.pageSize);\n    }\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n      this.setState({ show: true, contentDetailsOnModal: content,  contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    this.setState({ contents: [], selectedContent: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n      this.props.setSelectedContentName(collType.value)\n    } else {\n      this.props.setSelectedContentName(null);\n    }\n    this.setState({ contentIdForModal: undefined, currPageWillUpdating: PAGE });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      // page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    // collectionType, query, searchBy\n    if (this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n    }\n  }\n\n  handleQueryChange = (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: e.target.value })\n  }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n  fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  radioButton = (content) => {\n    if (this.state.selectedContent && this.state.selectedContent.id) {\n      return (<input onChange={() => {\n        this.setState({ selectedContent: content })\n      }}\n        type=\"radio\" id={content.id} name=\"content\" value={content.id}\n        defaultChecked={this.state.selectedContent.id === content.id}\n      />)\n    } else {\n      return (<input onChange={() => {\n        this.setState({ selectedContent: content })\n      }}\n        type=\"radio\" id={content + content.id} name=\"content\" value={content.id}\n      />)\n    }\n  };\n\n  onPageNavigation = changePageValue => {this.setState({ searchBtnClk: false }); this.changePage(changePageValue)}\n\n  handleStateOnTermSearch(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true\n    });\n  }\n\n  saveHandler = () => {\n    this.props.setContent([this.state.selectedContent]);\n    this.props.setCollectionType(this.state.selectedCollectionType);\n  }\n\n  render() {\n    console.log('this.state.singleContentList', this.state)\n    const pagination = {\n      page: this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n    const saveConfig = this.state.selectedContent && !(Object.keys(this.state.selectedContent).length && this.state.contents.length);\n\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n            <FormattedMessage id=\"app.selectContent\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b>{SELECT_COLLECTION_TYPE}</b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n             // placeholder={SELECT_COLLECTION_TYPE}\n              placeholder={this.props.intl.formatMessage({ id: \"app.chooseAnOption\" })}\n              emptyLabel={this.props.intl.formatMessage({ id: \"app.noMatchesFound\" })}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button\n                        id=\"dropdown-example\"\n                        role=\"button\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                        type=\"button\"\n                        className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.values.name}\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                       // placeholder={SEARCH_CONTENT_BY_NAME}\n                       placeholder={this.props.intl.formatMessage({ id: \"app.result\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id=\"app.search\" /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                <table className=\"table dataTable table-striped table-bordered table-hover\">\n                  <thead>\n                    <tr>\n                      {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.contents.map(content => {\n                      return (\n                        <tr key={content.id}>\n                          <td width=\"5%\" align=\"center\">\n                            {this.radioButton(content)}\n                          </td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                        </tr>)\n                    })}\n                  </tbody>\n                </table>\n                <div className=\"custom-page\"></div>\n                <PaginationRow\n                  itemCount={this.state.totalItems}\n                  itemsStart={itemsStart}\n                  itemsEnd={itemsEnd}\n                  viewType=\"table\"\n                  pagination={pagination}\n                  amountOfPages={this.state.lastPage}\n                  pageInputValue={this.state.currPageWillUpdating}\n                  onPageSet={this.changePage}\n                  onPerPageSelect={this.onPerPageSelect}\n                  onFirstPage={() => { this.onPageNavigation(1) }}\n                  onPreviousPage={() => { this.onPageNavigation(this.state.page - 1) }}\n                  onPageInput={this.onPageInput}\n                  onNextPage={() => { this.onPageNavigation(this.state.page + 1) }}\n                  onLastPage={() => { this.onPageNavigation(this.state.lastPage) }}\n                  onSubmit={this.onSubmit}\n                  messages={PAGINATION_MESSAGES(this.props)}\n                />\n              </Col>\n            </Row>\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={9}>\n              </Col>\n              <Col sm={3} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n                  <button className=\"btn-default btn\"><FormattedMessage id=\"app.cancel\" /></button>\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\" onClick={this.saveHandler} disabled={saveConfig}><FormattedMessage id=\"app.save\" /></button>\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey}/>\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(SingleContentList);   ","export default {\n    'app.content': 'Content',\n    'app.info': 'Info',\n    'app.name': 'Name',\n    'app.created': 'Created by',\n    'app.createdDate': 'Created date',\n    'app.selectDefaultTemplate': 'Select default template*',\n    'app.addExistingContent': 'Add existing content',\n    'app.addNewContent': 'Add new content',\n    'app.selectContent': 'Select Content',\n    'app.select': 'Select',\n    'app.selectCollection': 'Select Collection Type',\n    'app.chooseAnOption': 'Choose an option',\n    'app.widgetConfiguration': 'Widget Configuration',\n    'app.queryFilter': 'Query Filter',\n    'app.cancel': 'Cancel',\n    'app.saveAsQuery': 'Save as Query',\n    'app.saveAsListOfContents': 'Save as list of Contents',\n    'app.search': 'Search',\n    'app.lastEdited': 'Last edited',\n    'app.result': 'Result',\n    'app.remove': 'Remove',\n    'app.query': 'Query',\n    'app.selectTemplate': 'Select Template',\n    'app.save': 'Save',\n    'app.edit': 'Edit content',\n    'app.noMatchesFound': 'No matches found',\n    'app.noDataAvailable': 'No data available',\n    'app.firstPage': 'First Page',\n    'app.previousPage': 'Previous Page',\n    'app.currentPage': 'Current Page',\n    'app.nextPage': 'Next Page',\n    'app.lastPage': 'Last Page',\n    'app.perPage': 'per page',\n    'app.of': 'of',\n    'app.ok':'Ok'\n}","export default {\n    'app.content': 'Contenuto',\n    'app.info': 'Informazioni',\n    'app.name': 'Nome',\n    'app.created': 'Creata da',\n    'app.createdDate': 'Data di Creazione',\n    'app.selectDefaultTemplate': 'Seleziona il modello predefinito*',\n    'app.addExistingContent': 'Aggiungi contenuto esistente',\n    'app.addNewContent': 'Aggiungi nuovo contenuto',\n    'app.selectContent': 'Seleziona Contenuto',\n    'app.select': 'Selezionare',\n    'app.selectCollection': 'Seleziona Tipo di raccolta',\n    'app.chooseAnOption': `Scegliere un'opzione`,\n    'app.widgetConfiguration': 'Widget Configuration',\n    'app.queryFilter': 'Filtro di query',\n    'app.cancel': 'Annulla',\n    'app.saveAsQuery': 'Salva come query',\n    'app.saveAsListOfContents': 'Salva come elenco di contenuti',\n    'app.search': 'Ricerca',\n    'app.lastEdited': 'Ultima modifica',\n    'app.result': 'Risultato',\n    'app.remove': 'Rimuovere',\n    'app.query': 'Domanda',\n    'app.selectTemplate': 'Seleziona Modello',\n    'app.save': 'Salva',\n    'app.edit': 'Modifica contenutoe',\n    'app.noMatchesFound': 'Nessun risultato trovato',\n    'app.noDataAvailable': 'Nessun dato disponibile',\n    'app.firstPage': 'Prima pagina',\n    'app.previousPage': 'Pagina precedente',\n    'app.currentPage': 'Pagina corrente',\n    'app.nextPage': 'Pagina successiva',\n    'app.lastPage': 'Ultima pagina',\n    'app.perPage': 'per pagina',\n    'app.of': 'di',\n    'app.ok':'Ok'\n\n}","import React, { Component } from 'react';\nimport { Route, HashRouter, Switch } from 'react-router-dom';\nimport Config from './page/Config';\nimport SingleContentList from './page/SingleContentList';\n\nimport { IntlProvider, FormattedMessage } from \"react-intl\";\n\nimport en from \"./en.js\";\nimport it from \"./it.js\"; \n\nclass App extends Component {\n    // TODO: not delete because this all state will be pass through web-components later...\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContent: [],\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            selectedContentName: null,\n            name: '',\n            nameTwo: 'nameTwoVar',\n            collectionType: [],\n            locale:'en',\n            messages:{ en, it }\n            // collectionTypes: [],\n        };\n    }\n    componentDidMount = () => {\n        this.setLocale();\n        }\n        \n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContent = (data) => {\n        this.setState({ selectedContent: data })\n        if (data.length) this.setState({ selectedContentId: data[0].id })\n    }\n\n    setSelectedContentName = (contentName) => {\n        this.setState({ selectedContentName: contentName, name: contentName, nameTwo: contentName })\n    }\n\n    setTemplateId = (tempId) => {\n        this.setState({ selectedTemplateId: tempId })\n    }\n\n    setCollectionType = (collType) => {\n        this.setState({ collectionType: collType })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    render() {\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.state.messages[this.state.locale]}>\n                <>\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config selectedContent={this.state.selectedContent} setTemplateId={this.setTemplateId}\n                                    selectedContentName={this.state.selectedContentName} />\n                            </Route>\n                            <Route path='/singleconfigpage' exact>\n                                <SingleContentList\n                                    setContent={this.setContent}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    selectedContentId={this.state.selectedContentId}\n                                    setCollectionType={this.setCollectionType}\n                                    collType={this.state.collectionType}\n                                    selectedCont={this.state.selectedContent}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass SingleWidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        ReactDOM.render(<App ref={this.reactRootRef} config={this.#config} />, this.mountPoint);\n    }\n\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        ReactDOM.render(<App ref={this.reactRootRef} config={this.#config} />, this.mountPoint);\n    }\n}\n\ncustomElements.get('single-content-widget-config') || customElements.define('single-content-widget-config', SingleWidgetElement);\n\nexport default SingleWidgetElement;\n\n"],"sourceRoot":""}