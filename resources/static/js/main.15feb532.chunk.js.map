{"version":3,"sources":["helper/Constant.js","api/Api.js","MockClientPaginationTable.js","ui/ExpandCollapse.js","ui/MockModalManager.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/SingleContentList.js","App.js","custom-element/et-single-app.js"],"names":["PERPAGEOPTIONS","SELECT_COLLECTION_TYPE","NAME","T_HEADING","SELECT","CREATEDBY","LASTEDITED","CREATEDEDITED","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","domain","process","templateBaseUrl","rootAdminEndPoint","localeUrl","sortByCreateDateByDescOrder","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","data","getContents","collectionType","page","pageSize","url","getLocales","fetchContents","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","console","log","headers","config","defaultOptions","mockRows","MockClientPaginationTable","props","totalPages","perPage","state","pagination","Math","ceil","length","onPageInput","e","setState","pageChangeValue","target","value","onSubmit","setPage","Number","isNaN","newPaginationState","Object","assign","onPerPageSelect","eventKey","onFirstPage","onPreviousPage","onNextPage","onLastPage","onSelectRow","event","row","updatedSelectedRows","updatedRow","onRowsLogger","rows","selectedRows","selectedRowIndex","findIndex","r","id","selected","filter","deselectRow","push","selectRow","onSelectAllRows","checked","currentRows","updatedSelections","Set","map","updatedRows","indexOf","ids","onRow","rowIndex","setSelectedContent","selectedCollectionType","className","classNames","role","getSortingColumns","sortingColumns","sortableTransform","sort","onSort","selectedColumn","sortingOrder","defaultSortingOrder","strategy","byProperty","sortingFormatter","customHeaderFormatters","customHeaderFormattersDefinition","selectedContent","name","direction","TABLE_SORT_DIRECTION","ASC","position","columns","property","displayName","header","label","index","rowSpan","colSpan","transforms","formatters","customFormatters","sortableHeaderCellFormatter","cell","rowData","selectionCellFormatter","tableCellFormatter","perPageOptions","this","prevProps","prevState","compose","paginate","orderBy","sortedPaginatedRows","fluid","PfProvider","striped","bordered","hover","dataTable","components","cellProps","Header","headerRows","resolve","Body","rowKey","viewType","PAGINATION_VIEW","TABLE","pageInputValue","amountOfPages","itemCount","itemsStart","itemsEnd","React","Component","ExpandCollapse","handleSubmit","preventDefault","runOnFilterData","values","handleInputChange","onClick","open","tabIndex","style","margin","display","type","onChange","placeholder","SimpleTable","renderToggleButton","isMenuShown","height","top","right","border","onChangeTemplateId","setTemplateId","templateType","selectedTemplateType","keys","contentAttribute","item","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","defaultValue","disabled","hidden","templateList","el","templateName","Title","createdAt","createDate","selectDefaultTemplate","strapiDomain","Config","selectedTemplateId","selectedContentArr","selectedContenttype","nameTwo","encodeURIComponent","JSON","stringify","selectedContentId","handleTypeaheadChangeContentType","selectedContentType","option","componentDidMount","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","forEach","element","info","pluralName","selectedContentName","templatesList","collectionTypes","handleAddNewContent","strapiContentManagerUrl","newWindow","window","focus","bind","xs","title","to","bsStyle","marginTop","content","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","checkIfComponent","toString","dataObj","includes","arr","split","replace","Array","isArray","theKey","theIndex","Panel","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","width","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","renderAccordionData","toLowerCase","toggle","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","activeTabKey","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","componentDidUpdate","show","collectionAttributes","dummyData","dialogClassName","onHide","fetchTitleOrName","activeKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","SingleContentList","initSingleContentListPage","componentWillUnmount","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","doContentSearch","btnVisibility","document","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","searchByKey","contents","collType","setCollectionType","getContentsByCollectionType","setSelectedContentName","contentData","results","lastPage","pageCount","totalItems","total","onContentSearch","searchQuery","searchResult","handleStateOnTermSearch","handleQueryChange","allowedKeys","radioButton","onPageNavigation","changePageValue","changePage","setSearchBy","setCollectionTypeState","selectedCont","collectionTypeApiData","singularName","min","lg","options","toggleMenu","align","onPageSet","sm","setContent","App","contentName","tempId","path","exact","SingleWidgetElement","reactRootRef","createRef","mountPoint","current","createElement","appendChild","ReactDOM","render","ref","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.15feb532.chunk.js","sourcesContent":["/*********************\n * PAGINATION ********\n *********************/\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = \"Select Collection Type\";\n\n/*********************\n * UI LABEL **********\n *********************/\nexport const SELECT = \"Select\";\nexport const NAME = \"Name\";\nexport const CREATEDBY = \"Created by\";\nexport const LASTEDITED = \"Last edited\";\nexport const CREATEDEDITED = \"Created date\";\n\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    LASTEDITED: LASTEDITED,\n    CREATEDEDITED: CREATEDEDITED,\n}\n\nexport const BTN_ADD_NEW_CONTENT = 'Add new content';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS = [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = 'No data available'","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst localeUrl = `${domain}/i18n/locales`\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    // For testing purpose only\n    return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    console.log('ET-Widget-Config', token);\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN,\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import classNames from 'classnames';\nimport { orderBy } from 'lodash';\nimport {\n    customHeaderFormattersDefinition,\n    defaultSortingOrder, Grid, paginate, PaginationRow,\n    PAGINATION_VIEW, selectionCellFormatter, sortableHeaderCellFormatter,\n    Table, tableCellFormatter, TABLE_SORT_DIRECTION\n} from 'patternfly-react';\nimport React from 'react';\nimport { compose } from 'react-recompose';\nimport * as sort from 'sortabular';\nimport * as resolve from 'table-resolver';\n\nconst mockRows = []\n\nexport class MockClientPaginationTable extends React.Component {\n    static selectRow(row) {\n        return Object.assign({}, row, { selected: true });\n    }\n    static deselectRow(row) {\n        return Object.assign({}, row, { selected: false });\n    }\n\n    constructor(props) {\n        super(props);\n\n        const getSortingColumns = () => this.state.sortingColumns || {};\n\n        const sortableTransform = sort.sort({\n            getSortingColumns,\n            onSort: selectedColumn => {\n                this.setState({\n                    sortingColumns: sort.byColumn({\n                        sortingColumns: this.state.sortingColumns,\n                        sortingOrder: defaultSortingOrder,\n                        selectedColumn\n                    })\n                });\n            },\n            // Use property or index dependening on the sortingColumns structure specified\n            strategy: sort.strategies.byProperty\n        });\n\n        const sortingFormatter = sort.header({\n            sortableTransform,\n            getSortingColumns,\n            strategy: sort.strategies.byProperty\n        });\n\n        // enables our custom header formatters extensions to reactabular\n        this.customHeaderFormatters = customHeaderFormattersDefinition;\n\n        this.state = {\n            // selectedContent \n            selectedContent: [],\n\n            // Sort the first column in an ascending way by default.\n            sortingColumns: {\n                name: {\n                    direction: TABLE_SORT_DIRECTION.ASC,\n                    position: 0\n                }\n            },\n\n            // column definitions\n            columns: [\n                {\n                    property: 'select',\n                    displayName: 'Select',\n                    header: {\n                        label: 'select',\n                        props: {\n                            index: 0,\n                            rowSpan: 1,\n                            colSpan: 1,\n                            id: 'select'\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                        // customFormatters: [selectionHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 0\n                        },\n                        formatters: [\n                            (value, { rowData, rowIndex }) => {\n                                return selectionCellFormatter(\n                                    { rowData, rowIndex },\n                                    this.onSelectRow,\n                                    `vybrat ${rowIndex}`, `vyberte řádek ${rowIndex}`\n                                );\n                            }\n                        ]\n                    }\n                },\n                {\n                    property: 'Title',\n                    displayName: 'Names',\n                    header: {\n                        label: 'Name',\n                        props: {\n                            index: 1,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 1\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'createdBy',\n                    header: {\n                        label: 'Created by',\n                        props: {\n                            index: 2,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 2\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'updatedAt',\n                    header: {\n                        label: 'Last edited',\n                        props: {\n                            index: 3,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 3\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'Type',\n                    header: {\n                        label: 'Type',\n                        props: {\n                            index: 4,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 4\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'createdAt',\n                    header: {\n                        label: 'Created date',\n                        props: {\n                            index: 5,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 5\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'status',\n                    header: {\n                        label: 'Status',\n                        props: {\n                            index: 6,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 6\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                }\n                // {\n                //     property: 'actions',\n                //     header: {\n                //         label: 'Actions',\n                //         props: {\n                //             index: 7,\n                //             rowSpan: 1,\n                //             colSpan: 2\n                //         },\n                //         formatters: [actionHeaderCellFormatter]\n                //     },\n                //     cell: {\n                //         props: {\n                //             index: 7\n                //         },\n                //         formatters: [\n                //             (value, { rowData }) => {\n                //                 // console.log(\"npm i react-recompose\", rowData);\n                //                 return [\n                //                     <Table.Actions key=\"0\">\n                //                         <Table.Button\n                //                             onClick={() => alert('clicked ' + rowData.name)}\n                //                         >\n                //                             Actions\n                //                         </Table.Button>\n                //                     </Table.Actions>,\n                //                     <Table.Actions key=\"1\">\n                //                         <Table.DropdownKebab id=\"myKebab\" pullRight>\n                //                             <MenuItem>Action</MenuItem>\n                //                             <MenuItem>Another Action</MenuItem>\n                //                             <MenuItem>Something else here</MenuItem>\n                //                             <MenuItem divider />\n                //                             <MenuItem>Separated link</MenuItem>\n                //                         </Table.DropdownKebab>\n                //                     </Table.Actions>\n                //                 ];\n                //             }\n                //         ]\n                //     }\n                // }\n            ],\n\n            // rows and row selection state\n            rows: this.props.mockRows,\n            \n            // const [reloadToken, setReloadToken] = useState(((new Date()).getTime()).toString())\n\n            selectedRows: [],\n\n            // pagination default states\n            pagination: {\n                page: 1,\n                perPage: 6,\n                perPageOptions: [6, 10, 15]\n            },\n\n            // page input value\n            pageChangeValue: 1\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.mockRows) {\n            this.setState({ rows: this.props.mockRows })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.mockRows !== prevProps.mockRows)\n            this.setState({ rows: this.props.mockRows })\n    }\n\n    totalPages = () => {\n        const { perPage } = this.state.pagination;\n        return Math.ceil(mockRows.length / perPage);\n    };\n    onPageInput = e => {\n        this.setState({ pageChangeValue: e.target.value });\n    };\n    onSubmit = () => {\n        this.setPage(this.state.pageChangeValue);\n    };\n    setPage = value => {\n        const page = Number(value);\n        if (\n            !Number.isNaN(value) &&\n            value !== '' &&\n            page > 0 &&\n            page <= this.totalPages()\n        ) {\n            let newPaginationState = Object.assign({}, this.state.pagination);\n            newPaginationState.page = page;\n            this.setState({ pagination: newPaginationState, pageChangeValue: page });\n        }\n    }\n    onPerPageSelect = (eventKey, e) => {\n        let newPaginationState = Object.assign({}, this.state.pagination);\n        newPaginationState.perPage = eventKey;\n        newPaginationState.page = 1;\n        this.setState({ pagination: newPaginationState });\n    };\n    onFirstPage = () => {\n        this.setPage(1);\n    };\n    onPreviousPage = () => {\n        if (this.state.pagination.page > 1) {\n            this.setPage(this.state.pagination.page - 1);\n        }\n    };\n    onNextPage = () => {\n        const { page } = this.state.pagination;\n        if (page < this.totalPages()) {\n            this.setPage(this.state.pagination.page + 1);\n        }\n    };\n    onLastPage = () => {\n        const { page } = this.state.pagination;\n        const totalPages = this.totalPages();\n        if (page < totalPages) {\n            this.setPage(totalPages);\n        }\n    };\n    onSelectRow = (event, row) => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const selectedRowIndex = rows.findIndex(r => r.id === row.id);\n        if (selectedRowIndex > -1) {\n            let updatedSelectedRows, updatedRow;\n            if (row.selected) {\n                updatedSelectedRows = selectedRows.filter(r => !(r === row.id));\n                updatedRow = MockClientPaginationTable.deselectRow(row);\n            } else {\n                selectedRows.push(row.id);\n                updatedSelectedRows = selectedRows;\n                updatedRow = MockClientPaginationTable.selectRow(row);\n            }\n            rows[selectedRowIndex] = updatedRow;\n            this.setState({\n                rows: rows,\n                selectedRows: updatedSelectedRows\n            });\n            onRowsLogger(rows.filter(r => r.selected));\n        }\n    };\n    onSelectAllRows = event => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const checked = event.target.checked;\n        const currentRows = this.currentRows().rows;\n\n        if (checked) {\n            const updatedSelections = [\n                ...new Set([...currentRows.map(r => r.id), ...selectedRows])\n            ];\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? MockClientPaginationTable.selectRow(r) : r;\n            });\n            this.setState({\n                // important: you must update rows to force a re-render and trigger onRow hook\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        } else {\n            const ids = currentRows.map(r => r.id);\n            const updatedSelections = selectedRows.filter(r => {\n                return !(ids.indexOf(r) > -1);\n            });\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? r : MockClientPaginationTable.deselectRow(r);\n            });\n            this.setState({\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        }\n    };\n    currentRows() {\n        const { rows, sortingColumns, columns, pagination } = this.state;\n        return compose(\n            paginate(pagination),\n            sort.sorter({\n                columns: columns,\n                sortingColumns,\n                sort: orderBy,\n                strategy: sort.strategies.byProperty\n            })\n        )(rows);\n    }\n    // TODO:\n    onRow = (row, { rowIndex }) => {\n        // IMP: Need to figure it out\n        // const { selectedRows } = this.state;\n        // IMP: For now remove later\n        this.props.setSelectedContent([row], this.props.selectedCollectionType)\n        // this.setState({ selectedContent: [row] });\n        const selectedRows = mockRows\n\n        const selected = selectedRows.indexOf(row.id) > -1;\n        return {\n            className: classNames({ selected: selected }),\n            role: 'row'\n        };\n    }\n    render() {\n        const { columns, pagination, sortingColumns, pageChangeValue } = this.state;\n        const sortedPaginatedRows = this.currentRows();\n\n        return (\n            <Grid fluid>\n                <Table.PfProvider\n                    striped\n                    bordered\n                    hover\n                    dataTable\n                    columns={columns}\n                    components={{\n                        header: {\n                            cell: cellProps => {\n                                return this.customHeaderFormatters({\n                                    cellProps,\n                                    columns,\n                                    sortingColumns,\n                                    rows: sortedPaginatedRows.rows,\n                                    onSelectAllRows: this.onSelectAllRows\n                                });\n                            }\n                        }\n                    }}\n                >\n                    <Table.Header headerRows={resolve.headerRows({ columns })} />\n                    <Table.Body\n                        rows={sortedPaginatedRows.rows}\n                        rowKey=\"id\"\n                        onRow={this.onRow}\n                    />\n                </Table.PfProvider>\n                <PaginationRow\n                    viewType={PAGINATION_VIEW.TABLE}\n                    pagination={pagination}\n                    pageInputValue={pageChangeValue}\n                    amountOfPages={sortedPaginatedRows.amountOfPages}\n                    itemCount={sortedPaginatedRows.itemCount}\n                    itemsStart={sortedPaginatedRows.itemsStart}\n                    itemsEnd={sortedPaginatedRows.itemsEnd}\n                    onPerPageSelect={this.onPerPageSelect}\n                    onFirstPage={this.onFirstPage}\n                    onPreviousPage={this.onPreviousPage}\n                    onPageInput={this.onPageInput}\n                    onNextPage={this.onNextPage}\n                    onLastPage={this.onLastPage}\n                    onSubmit={this.onSubmit}\n                />\n            </Grid>\n        );\n    }\n}\n\n// MockClientPaginationTable.propTypes = {\n//     onRowsLogger: PropTypes.func.isRequired\n// };\n\n","import React from \"react\";\n\nclass ExpandCollapse extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            values: {\n                name: ''\n            }\n        };\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.runOnFilterData(this.state.values.name);\n    };\n\n    handleInputChange = (event) => {\n        this.setState({\n            values: { [event.target.name]: event.target.value },\n        });\n    };\n\n    onClick = () => {\n        this.setState({ open: !this.state.open })\n    }\n\n    handleKeyDown() {\n\n    }\n\n    render() {\n        return (\n            <div\n                className=\"ContentsFilter well\"\n                role=\"button\"\n                tabIndex={0}\n                style={{ margin: '1rem 0rem' }}\n            >\n                <form onSubmit={this.handleSubmit}>\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                        <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">Name <span className=\"caret\"></span></button>\n                        <input\n                            type=\"search\"\n                            name=\"name\"\n                            value={this.state.values.name}\n                            onChange={this.handleInputChange}\n                            role=\"combobox\"\n                            className=\"rbt-input-main form-control rbt-input\"\n                            placeholder=\"Search Content\"\n                        />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                        <button className=\"btn btn-primary\">Search</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ExpandCollapse;\n\n// <span className={`icon fa fa-chevron-${true ? 'down' : 'right'} CollapsibleSection__title-collapse-button`} />","import { Button, Col, Row, Modal, Icon } from 'patternfly-react';\nimport React, { Component, Fragment } from 'react'\nimport { fetchContents, filterContentsByName, getCollectionTypes } from '../api/Api'\nimport { MockClientPaginationTable } from '../MockClientPaginationTable'\nimport ExpandCollapse from './ExpandCollapse'\nimport './MockModalManager.css'\n\nexport default class MockModalManager extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { show: false, collectionTypes: [], mockRows: [], selectedContent: [], selectedCollectionType: null };\n    }\n\n    // TODO: mockRows\n    runOnFilterData = async (contentName) => {\n        await filterContentsByName(this.state.selectedCollectionType, contentName).then(response => {\n            const arr = response.data.data.map(el => {\n                el.attributes.id = el.id\n                el.attributes.createdBy = 'Admin';\n                el.attributes.status = 'Published';\n                return el.attributes\n            })\n            this.setState({ mockRows: arr });\n        });\n    }\n\n    componentDidMount = () => {\n    }\n\n    close = () => {\n        this.setState({ show: false })\n    }\n\n    open = async () => {\n        this.setState({ show: true })\n\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push(element.info)\n        });\n        this.setState({ collectionTypes: contentTypeRefine })\n    }\n\n    collectionTypeOnChange = (e) => {\n        e.persist()\n        this.state.collectionTypes.forEach(async (el) => {\n            if (el.singularName === e.target.value && e.target.value) {\n                this.setState({ selectedCollectionType: el.pluralName })\n                await fetchContents(el.pluralName).then(response => {\n                    const arr = response.data.data.map(el => {\n                        el.attributes.id = el.id\n                        el.attributes.createdBy = 'Admin';\n                        el.attributes.status = 'Published';\n                        // el.attributes.type = el.singularName;\n                        return el.attributes\n                    })\n                    this.setState({ mockRows: arr });\n                });\n            }\n        })\n    }\n\n    render() {\n        // TODO:\n        return (\n            <Fragment>\n                <div>\n                    {/* TODO: Add existing content need to beremoved later */}\n                {/* <div className=\"row\" style={{marginLeft: \"0px\", marginRight: \"0px\"}}>\n                    <Col xs={6}>\n                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                            Content: -\n                        </h3>\n                    </Col>\n                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                        <Button\n                            className=\"ChooseContentBody__add--existing app-tour-step-18\"\n                            bsStyle=\"primary\"\n                            onClick={this.open}\n                        >\n                            Add existing content\n                        </Button>\n                    </Col>\n                </div> */}\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.state.show} onHide={this.close}>\n                    <Modal.Header>\n                        <button\n                            className=\"close\"\n                            onClick={this.close}\n                            aria-hidden=\"true\"\n                            aria-label=\"Close\"\n                        >\n                            <Icon type=\"pf\" name=\"close\" />\n                        </button>\n                        <Modal.Title>Select one content item</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            // onClick={onClick}\n                            // onKeyDown={handleKeyDown}\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                            {/* {<span>{name}</span> || (\n                                <FormattedMessage id={nameId} defaultMessage=\"Info\" />\n                            )} */}\n\n                        </div>\n                        <Row>\n                            <label className=\"control-label col-xs-3\" htmlFor=\"group\">\n                                {/* <FormattedMessage id=\"user.authority.groups\" /> */}Collection Type\n                            </label>\n                            <Col xs={9}>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"group\"\n                                    data-testid={\"TEST_ID_USER_AUTHORITY_MODAL.GROUP_FIELD\"}\n                                    onChange={this.collectionTypeOnChange}\n                                >\n                                    <option value={0}>Select Collection Type</option>\n                                    {\n                                        this.state.collectionTypes.length && this.state.collectionTypes.map((collectionType, idx) => {\n                                            return (\n                                                <option key={collectionType.singularName} value={collectionType.singularName}>{collectionType.pluralName}</option>\n                                            )\n                                        })\n                                    }\n                                </select>\n                            </Col>\n                        </Row>\n                        <ExpandCollapse runOnFilterData={this.runOnFilterData} />\n\n                        {/* </FormGroup> */}\n                        <MockClientPaginationTable\n                            onRowsLogger={function noRefCheck() { }}\n                            mockRows={this.state.mockRows}\n                            selectedCollectionType={this.state.selectedCollectionType}\n                            setSelectedContent={this.props.setSelectedContent}\n                            />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            bsStyle=\"default\"\n                            className=\"btn-cancel\"\n                            onClick={this.close}\n                            >\n                            Cancel\n                        </Button>\n                        <Button bsStyle=\"primary\" onClick={this.close}>\n                            Choose\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                            </div>\n            </Fragment>\n        )\n    }\n}\n","import React from \"react\";\nimport moment from 'moment';\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e) => {\n        this.props.setTemplateId(e.target.value);\n    }\n\n    render() {\n        return (\n            <>\n                <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}>{contentAttribute[item]}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.selectedContent.length > 0 && (\n                                this.props.selectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[Object.keys(item)[1]]}</td>\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>\n                                                <select name=\"modelId\" defaultValue={'none'} className=\"form-control\" onChange={this.onChangeTemplateId}>\n                                                    <option value=\"none\" disabled hidden>Select Template</option>\n                                                    {this.props.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"Name\",\n    createdAt: \"Created by\",\n    updatedAt: \"Last edited\",\n    createDate: \"Created date\",\n    selectDefaultTemplate: \"Select default template *\"\n    // restirctions: \"Restrictions\"\n}","import React, { Component } from 'react'\nimport {\n    Grid,\n    Row,\n    Col,\n    Button\n} from 'patternfly-react';\nimport MockModalManager from '../ui/MockModalManager';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport { getCollectionTypes, getTemplate } from '../api/Api';\nimport { Link } from 'react-router-dom';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_TARGET_URL}`;\n\nexport default class Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContent: [],\n            name: null,\n            nameTwo: null,\n            collectionTypes: [],\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            templateList: []\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    onChangeTemplateId = (event) => {\n        this.setState({ selectedTemplateId: event.target.value })\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        this.setState({ selectedContent: selectedContentArr })\n        this.setState({ name: selectedContentArr })\n        this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n    }\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\">Content</h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                    <span>Info</span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                            Content: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/singleconfigpage\">\n                                            <Button bsStyle=\"primary\">\n                                                {this.props.selectedContent.length ? 'Edit' : 'Add existing'} content\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                {/* <MockModalManager rightSide={true} setSelectedContent={this.setSelectedContent} /> */}\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable setTemplateId={this.props.setTemplateId} templateList={this.state.templateList} content={this.state.selectedContent} selectedContent={this.props.selectedContent} />\n                                {/* {\n                                    this.state.selectedContentId != 0 &&\n                                    <div style={{ marginTop: \"1rem\" }}>\n                                        <select name=\"modelId\" className=\"form-control\" onChange={this.onChangeTemplateId}>\n                                            <option value=\"default\">Default\n                                            </option>\n                                            {this.state.templatesList.map((el, idx) => {\n                                                if (el.collectiontype.toLowerCase() === this.state.name[0].Type.toLowerCase()) {\n                                                    return <option key={idx} value={el.code}>{el.templatename}</option>;\n                                                }\n                                            })}\n                                        </select>\n                                    </div>\n                                } */}\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </form>\n        )\n    }\n}\n","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Icon, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getCollectionLocaleWise, getContentDetailsByCollectionTypeAndId, getContentDetailsById, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            activeTabKey: 0,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n        this.setState({ activeTabKey: index })\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async() =>{\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n      if (this.props.collectionType && this.props.contentId) {\n        if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n          const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n          this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n          this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n          this.setState({activeTabKey:0});\n        }\n      }\n    }\n    \n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} onHide={this.state.currentCode=[this.props.contentId]} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.state.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import {\n  Col, Grid, PaginationRow, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\n\nexport default class SingleContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      show: false,\n      contentDetailsOnModal: {},\n      searchQuery: '',\n      setSearchBy: '',\n      searchBtnClk: false,\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: null,\n      contentIdForModal: ''\n    }\n    this.searchByKey = ''\n  }\n\n  componentDidMount = async () => await this.initSingleContentListPage();\n\n  componentWillUnmount = () => this.shouldShowEtSaveBtn('visible');\n\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.doContentSearch();\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      // this.setState({ selectedContent: null }); Commented on edit to cache the content/record\n      await this.doContentSearch();\n    }\n  }\n\n  async initSingleContentListPage() {\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n    if (this.props.collType.length) {\n      this.setState({ selectedCollectionType: this.props.collType, selectedContent: this.props.selectedCont[0] });\n      await this.getContentsByCollectionType(this.props.collType[0].value, this.state.page, this.state.pageSize);\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  async doContentSearch() {\n    if (this.searchByKey && this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, this.state.page, this.state.pageSize\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n    }\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n      this.setState({ show: true, contentDetailsOnModal: content,  contentIdForModal: content && content.id })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    this.setState({ contents: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType })\n    this.props.setCollectionType(collectionType)\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n      this.props.setSelectedContentName(collType.value)\n    } else {\n      this.props.setSelectedContentName(null);\n    }\n    this.setState({ contentIdForModal: undefined, currPageWillUpdating: PAGE });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.pagination.page,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    // collectionType, query, searchBy\n    if (this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n    }\n  }\n\n  handleQueryChange = (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: e.target.value })\n  }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n  fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  radioButton = (content) => {\n    if (this.state.selectedContent && this.state.selectedContent.id) {\n      if (!this.props.selectedContentId || (this.props.selectedContentId !== this.state.selectedContent.id)) {\n        return (<input onClick={() => {\n          this.setState({ selectedContent: content })\n        }}\n          type=\"radio\" id={content + content.id} name=\"content\" value={content.id}\n        />)\n      }\n      if (this.props.selectedContentId > 0 && (this.props.selectedContentId > 0 || this.props.selectedContentId === this.state.selectedContent.id)) {\n        return (<input onClick={() => {\n          this.setState({ selectedContent: content })\n        }}\n          type=\"radio\" id={content + content.id} name=\"content\" value={content.id}\n          checked={(this.props.selectedContentId && this.props.selectedContentId) === content.id}\n        />)\n      }\n    } else {\n      return (<input onClick={() => {\n        this.setState({ selectedContent: content })\n      }}\n        type=\"radio\" id={content + content.id} name=\"content\" value={content.id}\n      />)\n    }\n  };\n\n  onPageNavigation = changePageValue => {this.setState({ searchBtnClk: false }); this.changePage(changePageValue)}\n\n  handleStateOnTermSearch(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true\n    });\n  }\n\n  render() {\n    const pagination = {\n      page: this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n              Select Content\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b>{SELECT_COLLECTION_TYPE}</b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n              placeholder={SELECT_COLLECTION_TYPE}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button\n                        id=\"dropdown-example\"\n                        role=\"button\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                        type=\"button\"\n                        className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.values.name}\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                        placeholder={SEARCH_CONTENT_BY_NAME}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}>Search</button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                <table className=\"table dataTable table-striped table-bordered table-hover\">\n                  <thead>\n                    <tr>\n                      {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.contents.map(content => {\n                      return (\n                        <tr key={content.id}>\n                          <td width=\"5%\" align=\"center\">\n                            {this.radioButton(content)}\n                          </td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                        </tr>)\n                    })}\n                  </tbody>\n                </table>\n                <div className=\"custom-page\"></div>\n                <PaginationRow\n                  itemCount={this.state.totalItems}\n                  itemsStart={itemsStart}\n                  itemsEnd={itemsEnd}\n                  viewType=\"table\"\n                  pagination={pagination}\n                  amountOfPages={this.state.lastPage}\n                  pageInputValue={this.state.currPageWillUpdating}\n                  onPageSet={this.changePage}\n                  onPerPageSelect={this.onPerPageSelect}\n                  onFirstPage={() => { this.onPageNavigation(1) }}\n                  onPreviousPage={() => { this.onPageNavigation(this.state.page - 1) }}\n                  onPageInput={this.onPageInput}\n                  onNextPage={() => { this.onPageNavigation(this.state.page + 1) }}\n                  onLastPage={() => { this.onPageNavigation(this.state.lastPage) }}\n                  onSubmit={this.onSubmit}\n                // messages={messages} i18n\n                />\n              </Col>\n            </Row>\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={9}>\n              </Col>\n              <Col sm={3} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n                  <button className=\"btn-default btn\">Cancel</button>\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\" onClick={()=>this.props.setContent([this.state.selectedContent])} disabled={!this.state.selectedContent}>Save</button>\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName}/>\n      </Grid>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Route, HashRouter, Switch } from 'react-router-dom';\nimport Config from './page/Config';\nimport SingleContentList from './page/SingleContentList';\n\nclass App extends Component {\n    // TODO: not delete because this all state will be pass through web-components later...\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContent: [],\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            selectedContentName: null,\n            name: '',\n            nameTwo: 'nameTwoVar',\n            collectionType: [],\n        };\n    }\n\n    setContent = (data) => {\n        this.setState({ selectedContent: data })\n        if (data.length) this.setState({ selectedContentId: data[0].id })\n    }\n\n    setSelectedContentName = (contentName) => {\n        this.setState({ selectedContentName: contentName, name: contentName, nameTwo: contentName })\n    }\n\n    setTemplateId = (tempId) => {\n        this.setState({ selectedTemplateId: tempId })\n    }\n\n    setCollectionType = (collType) => {\n        this.setState({ collectionType: collType })\n    }\n\n    render() {\n        return (\n            <>\n                <HashRouter>\n                    <Switch>\n                        <Route path='/' exact>\n                            <Config selectedContent={this.state.selectedContent} setTemplateId={this.setTemplateId}\n                            selectedContentName={this.state.selectedContentName} />\n                        </Route>\n                        <Route path='/singleconfigpage' exact>\n                            <SingleContentList\n                                setContent={this.setContent}\n                                setSelectedContentName={this.setSelectedContentName}\n                                selectedContentId={this.state.selectedContentId}\n                                setCollectionType={this.setCollectionType}\n                                collType={this.state.collectionType}\n                                selectedCont={this.state.selectedContent}\n                            />\n                        </Route>\n                    </Switch>\n                </HashRouter>\n            </>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass SingleWidgetElement extends HTMLElement {\n    constructor() {\n        console.log(\"SingleWidgetElement ~ constructor\");\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    // Big Hack\n    get config() {\n        console.log(\"GET CONFIG THIS.REACTROOTREF.CURRENT\",this.reactRootRef.current)\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        console.log(\"BALUE\", value)\n        console.log(\"SET CONFIG\", this.reactRootRef.current);\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        console.log(\"SingleWidgetElement ~ connectedCallback\");\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n    }\n}\n\ncustomElements.get('single-content-widget-config') || customElements.define('single-content-widget-config', SingleWidgetElement);\n\nexport default SingleWidgetElement;\n"],"sourceRoot":""}